(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 11.08.2006 14:00:52         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

unit BusinessClasses;

{$DEFINE BusinessClasses_unitheader}
{$INCLUDE BusinessClasses_Interface.inc}

{ Includefile for methodimplementations }


const
  BoldMemberAssertInvalidObjectType: string = 'Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)';

{ TBusinessClassesRoot }

procedure TBusinessClassesRootList.Add(NewObject: TBusinessClassesRoot);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TBusinessClassesRootList.IndexOf(anObject: TBusinessClassesRoot): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TBusinessClassesRootList.Includes(anObject: TBusinessClassesRoot) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TBusinessClassesRootList.AddNew: TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(InternalAddNew);
end;

procedure TBusinessClassesRootList.Insert(index: Integer; NewObject: TBusinessClassesRoot);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TBusinessClassesRootList.GetBoldObject(index: Integer): TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(GetElement(index));
end;

procedure TBusinessClassesRootList.SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
begin;
  SetElement(index, NewObject);
end;

{ TLinksostavlyaet_harakterispoljz_prizn_dobavleniya }

function TLinksostavlyaet_harakterispoljz_prizn_dobavleniya._Get_M_ispoljz_prizn_dobavleniya: TBoldObjectReference;
begin
  assert(ValidateMember('TLinksostavlyaet_harakterispoljz_prizn_dobavleniya', 'ispoljz_prizn_dobavleniya', 0, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[0]);
end;

function TLinksostavlyaet_harakterispoljz_prizn_dobavleniya._Getispoljz_prizn_dobavleniya: TPriznak_razdela;
begin
  assert(not assigned(M_ispoljz_prizn_dobavleniya.BoldObject) or (M_ispoljz_prizn_dobavleniya.BoldObject is TPriznak_razdela), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'ispoljz_prizn_dobavleniya', M_ispoljz_prizn_dobavleniya.BoldObject.ClassName, 'TPriznak_razdela']));
  Result := TPriznak_razdela(M_ispoljz_prizn_dobavleniya.BoldObject);
end;

function TLinksostavlyaet_harakterispoljz_prizn_dobavleniya._Get_M_sostavlyaet_harakter: TBoldObjectReference;
begin
  assert(ValidateMember('TLinksostavlyaet_harakterispoljz_prizn_dobavleniya', 'sostavlyaet_harakter', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function TLinksostavlyaet_harakterispoljz_prizn_dobavleniya._Getsostavlyaet_harakter: TKupon;
begin
  assert(not assigned(M_sostavlyaet_harakter.BoldObject) or (M_sostavlyaet_harakter.BoldObject is TKupon), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'sostavlyaet_harakter', M_sostavlyaet_harakter.BoldObject.ClassName, 'TKupon']));
  Result := TKupon(M_sostavlyaet_harakter.BoldObject);
end;

procedure TLinksostavlyaet_harakterispoljz_prizn_dobavleniyaList.Add(NewObject: TLinksostavlyaet_harakterispoljz_prizn_dobavleniya);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TLinksostavlyaet_harakterispoljz_prizn_dobavleniyaList.IndexOf(anObject: TLinksostavlyaet_harakterispoljz_prizn_dobavleniya): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TLinksostavlyaet_harakterispoljz_prizn_dobavleniyaList.Includes(anObject: TLinksostavlyaet_harakterispoljz_prizn_dobavleniya) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TLinksostavlyaet_harakterispoljz_prizn_dobavleniyaList.AddNew: TLinksostavlyaet_harakterispoljz_prizn_dobavleniya;
begin
  result := TLinksostavlyaet_harakterispoljz_prizn_dobavleniya(InternalAddNew);
end;

procedure TLinksostavlyaet_harakterispoljz_prizn_dobavleniyaList.Insert(index: Integer; NewObject: TLinksostavlyaet_harakterispoljz_prizn_dobavleniya);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TLinksostavlyaet_harakterispoljz_prizn_dobavleniyaList.GetBoldObject(index: Integer): TLinksostavlyaet_harakterispoljz_prizn_dobavleniya;
begin
  result := TLinksostavlyaet_harakterispoljz_prizn_dobavleniya(GetElement(index));
end;

procedure TLinksostavlyaet_harakterispoljz_prizn_dobavleniyaList.SetBoldObject(index: Integer; NewObject: TLinksostavlyaet_harakterispoljz_prizn_dobavleniya);
begin;
  SetElement(index, NewObject);
end;

{ TLinkvhodit_v_vypuskvklyuchaet_razdel }

function TLinkvhodit_v_vypuskvklyuchaet_razdel._Get_M_vklyuchaet_razdel: TBoldObjectReference;
begin
  assert(ValidateMember('TLinkvhodit_v_vypuskvklyuchaet_razdel', 'vklyuchaet_razdel', 0, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[0]);
end;

function TLinkvhodit_v_vypuskvklyuchaet_razdel._Getvklyuchaet_razdel: TRazdel;
begin
  assert(not assigned(M_vklyuchaet_razdel.BoldObject) or (M_vklyuchaet_razdel.BoldObject is TRazdel), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'vklyuchaet_razdel', M_vklyuchaet_razdel.BoldObject.ClassName, 'TRazdel']));
  Result := TRazdel(M_vklyuchaet_razdel.BoldObject);
end;

function TLinkvhodit_v_vypuskvklyuchaet_razdel._Get_M_vhodit_v_vypusk: TBoldObjectReference;
begin
  assert(ValidateMember('TLinkvhodit_v_vypuskvklyuchaet_razdel', 'vhodit_v_vypusk', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function TLinkvhodit_v_vypuskvklyuchaet_razdel._Getvhodit_v_vypusk: TVypusk;
begin
  assert(not assigned(M_vhodit_v_vypusk.BoldObject) or (M_vhodit_v_vypusk.BoldObject is TVypusk), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'vhodit_v_vypusk', M_vhodit_v_vypusk.BoldObject.ClassName, 'TVypusk']));
  Result := TVypusk(M_vhodit_v_vypusk.BoldObject);
end;

procedure TLinkvhodit_v_vypuskvklyuchaet_razdelList.Add(NewObject: TLinkvhodit_v_vypuskvklyuchaet_razdel);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TLinkvhodit_v_vypuskvklyuchaet_razdelList.IndexOf(anObject: TLinkvhodit_v_vypuskvklyuchaet_razdel): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TLinkvhodit_v_vypuskvklyuchaet_razdelList.Includes(anObject: TLinkvhodit_v_vypuskvklyuchaet_razdel) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TLinkvhodit_v_vypuskvklyuchaet_razdelList.AddNew: TLinkvhodit_v_vypuskvklyuchaet_razdel;
begin
  result := TLinkvhodit_v_vypuskvklyuchaet_razdel(InternalAddNew);
end;

procedure TLinkvhodit_v_vypuskvklyuchaet_razdelList.Insert(index: Integer; NewObject: TLinkvhodit_v_vypuskvklyuchaet_razdel);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TLinkvhodit_v_vypuskvklyuchaet_razdelList.GetBoldObject(index: Integer): TLinkvhodit_v_vypuskvklyuchaet_razdel;
begin
  result := TLinkvhodit_v_vypuskvklyuchaet_razdel(GetElement(index));
end;

procedure TLinkvhodit_v_vypuskvklyuchaet_razdelList.SetBoldObject(index: Integer; NewObject: TLinkvhodit_v_vypuskvklyuchaet_razdel);
begin;
  SetElement(index, NewObject);
end;

{ TVyvoditj_v_datu }

function TVyvoditj_v_datu._Get_M_Data: TBADate;
begin
  assert(ValidateMember('TVyvoditj_v_datu', 'Data', 0, TBADate));
  Result := TBADate(BoldMembers[0]);
end;

function TVyvoditj_v_datu._GetData: TDate;
begin
  Result := M_Data.AsDate;
end;

procedure TVyvoditj_v_datu._SetData(const NewValue: TDate);
begin
  M_Data.AsDate := NewValue;
end;

function TVyvoditj_v_datu._Get_M_razresh_v_otd_dni: TBoldObjectReference;
begin
  assert(ValidateMember('TVyvoditj_v_datu', 'razresh_v_otd_dni', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function TVyvoditj_v_datu._Getrazresh_v_otd_dni: TObjyavlenie;
begin
  assert(not assigned(M_razresh_v_otd_dni.BoldObject) or (M_razresh_v_otd_dni.BoldObject is TObjyavlenie), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'razresh_v_otd_dni', M_razresh_v_otd_dni.BoldObject.ClassName, 'TObjyavlenie']));
  Result := TObjyavlenie(M_razresh_v_otd_dni.BoldObject);
end;

procedure TVyvoditj_v_datu._Setrazresh_v_otd_dni(const value: TObjyavlenie);
begin
  M_razresh_v_otd_dni.BoldObject := value;
end;

procedure TVyvoditj_v_datuList.Add(NewObject: TVyvoditj_v_datu);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TVyvoditj_v_datuList.IndexOf(anObject: TVyvoditj_v_datu): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TVyvoditj_v_datuList.Includes(anObject: TVyvoditj_v_datu) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TVyvoditj_v_datuList.AddNew: TVyvoditj_v_datu;
begin
  result := TVyvoditj_v_datu(InternalAddNew);
end;

procedure TVyvoditj_v_datuList.Insert(index: Integer; NewObject: TVyvoditj_v_datu);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TVyvoditj_v_datuList.GetBoldObject(index: Integer): TVyvoditj_v_datu;
begin
  result := TVyvoditj_v_datu(GetElement(index));
end;

procedure TVyvoditj_v_datuList.SetBoldObject(index: Integer; NewObject: TVyvoditj_v_datu);
begin;
  SetElement(index, NewObject);
end;

{ TVypusk }

function TVypusk._Get_M_Nomer_vypuska: TBAInteger;
begin
  assert(ValidateMember('TVypusk', 'Nomer_vypuska', 0, TBAInteger));
  Result := TBAInteger(BoldMembers[0]);
end;

function TVypusk._GetNomer_vypuska: Integer;
begin
  Result := M_Nomer_vypuska.AsInteger;
end;

procedure TVypusk._SetNomer_vypuska(const NewValue: Integer);
begin
  M_Nomer_vypuska.AsInteger := NewValue;
end;

function TVypusk._Get_M_God_vypuska: TBAInteger;
begin
  assert(ValidateMember('TVypusk', 'God_vypuska', 1, TBAInteger));
  Result := TBAInteger(BoldMembers[1]);
end;

function TVypusk._GetGod_vypuska: Integer;
begin
  Result := M_God_vypuska.AsInteger;
end;

procedure TVypusk._SetGod_vypuska(const NewValue: Integer);
begin
  M_God_vypuska.AsInteger := NewValue;
end;

function TVypusk._Get_M_YavlTekushim: TBABoolean;
begin
  assert(ValidateMember('TVypusk', 'YavlTekushim', 2, TBABoolean));
  Result := TBABoolean(BoldMembers[2]);
end;

function TVypusk._GetYavlTekushim: Boolean;
begin
  Result := M_YavlTekushim.AsBoolean;
end;

procedure TVypusk._SetYavlTekushim(const NewValue: Boolean);
begin
  M_YavlTekushim.AsBoolean := NewValue;
end;

function TVypusk._Get_M_Data_vypuska: TBADate;
begin
  assert(ValidateMember('TVypusk', 'Data_vypuska', 3, TBADate));
  Result := TBADate(BoldMembers[3]);
end;

function TVypusk._GetData_vypuska: TDate;
begin
  Result := M_Data_vypuska.AsDate;
end;

procedure TVypusk._SetData_vypuska(const NewValue: TDate);
begin
  M_Data_vypuska.AsDate := NewValue;
end;

function TVypusk._Get_M_Otkorretir: TBABoolean;
begin
  assert(ValidateMember('TVypusk', 'Otkorretir', 4, TBABoolean));
  Result := TBABoolean(BoldMembers[4]);
end;

function TVypusk._GetOtkorretir: Boolean;
begin
  Result := M_Otkorretir.AsBoolean;
end;

procedure TVypusk._SetOtkorretir(const NewValue: Boolean);
begin
  M_Otkorretir.AsBoolean := NewValue;
end;

function TVypusk._Get_M_GotNaVygr: TBABoolean;
begin
  assert(ValidateMember('TVypusk', 'GotNaVygr', 5, TBABoolean));
  Result := TBABoolean(BoldMembers[5]);
end;

function TVypusk._GetGotNaVygr: Boolean;
begin
  Result := M_GotNaVygr.AsBoolean;
end;

procedure TVypusk._SetGotNaVygr(const NewValue: Boolean);
begin
  M_GotNaVygr.AsBoolean := NewValue;
end;

function TVypusk._Get_M_Identifikator: TBAFloat;
begin
  assert(ValidateMember('TVypusk', 'Identifikator', 6, TBAFloat));
  Result := TBAFloat(BoldMembers[6]);
end;

function TVypusk._GetIdentifikator: double;
begin
  Result := M_Identifikator.AsFloat;
end;

procedure TVypusk._SetIdentifikator(const NewValue: double);
begin
  M_Identifikator.AsFloat := NewValue;
end;

function TVypusk._Get_M_Posl_vypusk_data: TBADate;
begin
  assert(ValidateMember('TVypusk', 'Posl_vypusk_data', 7, TBADate));
  Result := TBADate(BoldMembers[7]);
end;

function TVypusk._GetPosl_vypusk_data: TDate;
begin
  Result := M_Posl_vypusk_data.AsDate;
end;

function TVypusk._Get_M_Tek_vyp_identifikator: TBAFloat;
begin
  assert(ValidateMember('TVypusk', 'Tek_vyp_identifikator', 8, TBAFloat));
  Result := TBAFloat(BoldMembers[8]);
end;

function TVypusk._GetTek_vyp_identifikator: double;
begin
  Result := M_Tek_vyp_identifikator.AsFloat;
end;

function TVypusk._Get_M_Tek_vypusk_data: TBADate;
begin
  assert(ValidateMember('TVypusk', 'Tek_vypusk_data', 9, TBADate));
  Result := TBADate(BoldMembers[9]);
end;

function TVypusk._GetTek_vypusk_data: TDate;
begin
  Result := M_Tek_vypusk_data.AsDate;
end;

function TVypusk._Get_M_Posl_vyp_identifikator: TBAFloat;
begin
  assert(ValidateMember('TVypusk', 'Posl_vyp_identifikator', 10, TBAFloat));
  Result := TBAFloat(BoldMembers[10]);
end;

function TVypusk._GetPosl_vyp_identifikator: double;
begin
  Result := M_Posl_vyp_identifikator.AsFloat;
end;

function TVypusk._Get_M_Identifikator_gaz: TBAInteger;
begin
  assert(ValidateMember('TVypusk', 'Identifikator_gaz', 11, TBAInteger));
  Result := TBAInteger(BoldMembers[11]);
end;

function TVypusk._GetIdentifikator_gaz: Integer;
begin
  Result := M_Identifikator_gaz.AsInteger;
end;

function TVypusk._Get_M_Cvetovoe_oboznachenie: TBAString;
begin
  assert(ValidateMember('TVypusk', 'Cvetovoe_oboznachenie', 12, TBAString));
  Result := TBAString(BoldMembers[12]);
end;

function TVypusk._GetCvetovoe_oboznachenie: String;
begin
  Result := M_Cvetovoe_oboznachenie.AsString;
end;

procedure TVypusk._SetCvetovoe_oboznachenie(const NewValue: String);
begin
  M_Cvetovoe_oboznachenie.AsString := NewValue;
end;

function TVypusk._Get_M_Tek_vypusk_nomer: TBAInteger;
begin
  assert(ValidateMember('TVypusk', 'Tek_vypusk_nomer', 13, TBAInteger));
  Result := TBAInteger(BoldMembers[13]);
end;

function TVypusk._GetTek_vypusk_nomer: Integer;
begin
  Result := M_Tek_vypusk_nomer.AsInteger;
end;

function TVypusk._Get_M_Tek_vypusk_god: TBAInteger;
begin
  assert(ValidateMember('TVypusk', 'Tek_vypusk_god', 14, TBAInteger));
  Result := TBAInteger(BoldMembers[14]);
end;

function TVypusk._GetTek_vypusk_god: Integer;
begin
  Result := M_Tek_vypusk_god.AsInteger;
end;

function TVypusk._Get_M_Posl_vypusk_nomer: TBAInteger;
begin
  assert(ValidateMember('TVypusk', 'Posl_vypusk_nomer', 15, TBAInteger));
  Result := TBAInteger(BoldMembers[15]);
end;

function TVypusk._GetPosl_vypusk_nomer: Integer;
begin
  Result := M_Posl_vypusk_nomer.AsInteger;
end;

function TVypusk._Get_M_Posl_vypusk_god: TBAInteger;
begin
  assert(ValidateMember('TVypusk', 'Posl_vypusk_god', 16, TBAInteger));
  Result := TBAInteger(BoldMembers[16]);
end;

function TVypusk._GetPosl_vypusk_god: Integer;
begin
  Result := M_Posl_vypusk_god.AsInteger;
end;

function TVypusk._Get_M_Ident_vyd_razd: TBAFloat;
begin
  assert(ValidateMember('TVypusk', 'Ident_vyd_razd', 17, TBAFloat));
  Result := TBAFloat(BoldMembers[17]);
end;

function TVypusk._GetIdent_vyd_razd: double;
begin
  Result := M_Ident_vyd_razd.AsFloat;
end;

function TVypusk._Get_M_vklyuchaet_gr_vyp: TBoldObjectReference;
begin
  assert(ValidateMember('TVypusk', 'vklyuchaet_gr_vyp', 18, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[18]);
end;

function TVypusk._Getvklyuchaet_gr_vyp: TGruppa_vypuskov;
begin
  assert(not assigned(M_vklyuchaet_gr_vyp.BoldObject) or (M_vklyuchaet_gr_vyp.BoldObject is TGruppa_vypuskov), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'vklyuchaet_gr_vyp', M_vklyuchaet_gr_vyp.BoldObject.ClassName, 'TGruppa_vypuskov']));
  Result := TGruppa_vypuskov(M_vklyuchaet_gr_vyp.BoldObject);
end;

procedure TVypusk._Setvklyuchaet_gr_vyp(const value: TGruppa_vypuskov);
begin
  M_vklyuchaet_gr_vyp.BoldObject := value;
end;

function TVypusk._Get_M_vhodit_v_gazetu: TBoldObjectReference;
begin
  assert(ValidateMember('TVypusk', 'vhodit_v_gazetu', 19, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[19]);
end;

function TVypusk._Getvhodit_v_gazetu: TGazeta;
begin
  assert(not assigned(M_vhodit_v_gazetu.BoldObject) or (M_vhodit_v_gazetu.BoldObject is TGazeta), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'vhodit_v_gazetu', M_vhodit_v_gazetu.BoldObject.ClassName, 'TGazeta']));
  Result := TGazeta(M_vhodit_v_gazetu.BoldObject);
end;

procedure TVypusk._Setvhodit_v_gazetu(const value: TGazeta);
begin
  M_vhodit_v_gazetu.BoldObject := value;
end;

function TVypusk._Getvklyuchaet_razdel: TRazdelList;
begin
  assert(ValidateMember('TVypusk', 'vklyuchaet_razdel', 20, TRazdelList));
  Result := TRazdelList(BoldMembers[20]);
end;

function TVypusk._GetLinkvhodit_v_vypuskvklyuchaet_razdel: TLinkvhodit_v_vypuskvklyuchaet_razdelList;
begin
  assert(ValidateMember('TVypusk', 'Linkvhodit_v_vypuskvklyuchaet_razdel', 21, TLinkvhodit_v_vypuskvklyuchaet_razdelList));
  Result := TLinkvhodit_v_vypuskvklyuchaet_razdelList(BoldMembers[21]);
end;

procedure TVypuskList.Add(NewObject: TVypusk);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TVypuskList.IndexOf(anObject: TVypusk): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TVypuskList.Includes(anObject: TVypusk) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TVypuskList.AddNew: TVypusk;
begin
  result := TVypusk(InternalAddNew);
end;

procedure TVypuskList.Insert(index: Integer; NewObject: TVypusk);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TVypuskList.GetBoldObject(index: Integer): TVypusk;
begin
  result := TVypusk(GetElement(index));
end;

procedure TVypuskList.SetBoldObject(index: Integer; NewObject: TVypusk);
begin;
  SetElement(index, NewObject);
end;

{ TGod_vyhoda }

function TGod_vyhoda._Get_M_God: TBAInteger;
begin
  assert(ValidateMember('TGod_vyhoda', 'God', 0, TBAInteger));
  Result := TBAInteger(BoldMembers[0]);
end;

function TGod_vyhoda._GetGod: Integer;
begin
  Result := M_God.AsInteger;
end;

procedure TGod_vyhoda._SetGod(const NewValue: Integer);
begin
  M_God.AsInteger := NewValue;
end;

function TGod_vyhoda._Get_M_Chislo_dnei: TBAInteger;
begin
  assert(ValidateMember('TGod_vyhoda', 'Chislo_dnei', 1, TBAInteger));
  Result := TBAInteger(BoldMembers[1]);
end;

function TGod_vyhoda._GetChislo_dnei: Integer;
begin
  Result := M_Chislo_dnei.AsInteger;
end;

procedure TGod_vyhoda._SetChislo_dnei(const NewValue: Integer);
begin
  M_Chislo_dnei.AsInteger := NewValue;
end;

procedure TGod_vyhodaList.Add(NewObject: TGod_vyhoda);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TGod_vyhodaList.IndexOf(anObject: TGod_vyhoda): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TGod_vyhodaList.Includes(anObject: TGod_vyhoda) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TGod_vyhodaList.AddNew: TGod_vyhoda;
begin
  result := TGod_vyhoda(InternalAddNew);
end;

procedure TGod_vyhodaList.Insert(index: Integer; NewObject: TGod_vyhoda);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TGod_vyhodaList.GetBoldObject(index: Integer): TGod_vyhoda;
begin
  result := TGod_vyhoda(GetElement(index));
end;

procedure TGod_vyhodaList.SetBoldObject(index: Integer; NewObject: TGod_vyhoda);
begin;
  SetElement(index, NewObject);
end;

{ TKlass_poiska }

function TKlass_poiska._Get_M_Iskatj_po_klientu: TBABoolean;
begin
  assert(ValidateMember('TKlass_poiska', 'Iskatj_po_klientu', 0, TBABoolean));
  Result := TBABoolean(BoldMembers[0]);
end;

function TKlass_poiska._GetIskatj_po_klientu: Boolean;
begin
  Result := M_Iskatj_po_klientu.AsBoolean;
end;

procedure TKlass_poiska._SetIskatj_po_klientu(const NewValue: Boolean);
begin
  M_Iskatj_po_klientu.AsBoolean := NewValue;
end;

function TKlass_poiska._Get_M_Imya_klienta: TBAString;
begin
  assert(ValidateMember('TKlass_poiska', 'Imya_klienta', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TKlass_poiska._GetImya_klienta: String;
begin
  Result := M_Imya_klienta.AsString;
end;

procedure TKlass_poiska._SetImya_klienta(const NewValue: String);
begin
  M_Imya_klienta.AsString := NewValue;
end;

function TKlass_poiska._Get_M_Otchestvo_klienta: TBAString;
begin
  assert(ValidateMember('TKlass_poiska', 'Otchestvo_klienta', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TKlass_poiska._GetOtchestvo_klienta: String;
begin
  Result := M_Otchestvo_klienta.AsString;
end;

procedure TKlass_poiska._SetOtchestvo_klienta(const NewValue: String);
begin
  M_Otchestvo_klienta.AsString := NewValue;
end;

function TKlass_poiska._Get_M_Iskatj_po_klyuch_slovam: TBABoolean;
begin
  assert(ValidateMember('TKlass_poiska', 'Iskatj_po_klyuch_slovam', 3, TBABoolean));
  Result := TBABoolean(BoldMembers[3]);
end;

function TKlass_poiska._GetIskatj_po_klyuch_slovam: Boolean;
begin
  Result := M_Iskatj_po_klyuch_slovam.AsBoolean;
end;

procedure TKlass_poiska._SetIskatj_po_klyuch_slovam(const NewValue: Boolean);
begin
  M_Iskatj_po_klyuch_slovam.AsBoolean := NewValue;
end;

function TKlass_poiska._Get_M_Klyuch_slovo: TBAString;
begin
  assert(ValidateMember('TKlass_poiska', 'Klyuch_slovo', 4, TBAString));
  Result := TBAString(BoldMembers[4]);
end;

function TKlass_poiska._GetKlyuch_slovo: String;
begin
  Result := M_Klyuch_slovo.AsString;
end;

procedure TKlass_poiska._SetKlyuch_slovo(const NewValue: String);
begin
  M_Klyuch_slovo.AsString := NewValue;
end;

function TKlass_poiska._Get_M_Iskatj_po_date_dob: TBABoolean;
begin
  assert(ValidateMember('TKlass_poiska', 'Iskatj_po_date_dob', 5, TBABoolean));
  Result := TBABoolean(BoldMembers[5]);
end;

function TKlass_poiska._GetIskatj_po_date_dob: Boolean;
begin
  Result := M_Iskatj_po_date_dob.AsBoolean;
end;

procedure TKlass_poiska._SetIskatj_po_date_dob(const NewValue: Boolean);
begin
  M_Iskatj_po_date_dob.AsBoolean := NewValue;
end;

function TKlass_poiska._Get_M_S_daty_dob: TBADate;
begin
  assert(ValidateMember('TKlass_poiska', 'S_daty_dob', 6, TBADate));
  Result := TBADate(BoldMembers[6]);
end;

function TKlass_poiska._GetS_daty_dob: TDate;
begin
  Result := M_S_daty_dob.AsDate;
end;

procedure TKlass_poiska._SetS_daty_dob(const NewValue: TDate);
begin
  M_S_daty_dob.AsDate := NewValue;
end;

function TKlass_poiska._Get_M_Po_datu_dob: TBADate;
begin
  assert(ValidateMember('TKlass_poiska', 'Po_datu_dob', 7, TBADate));
  Result := TBADate(BoldMembers[7]);
end;

function TKlass_poiska._GetPo_datu_dob: TDate;
begin
  Result := M_Po_datu_dob.AsDate;
end;

procedure TKlass_poiska._SetPo_datu_dob(const NewValue: TDate);
begin
  M_Po_datu_dob.AsDate := NewValue;
end;

function TKlass_poiska._Get_M_Seg_data: TBADate;
begin
  assert(ValidateMember('TKlass_poiska', 'Seg_data', 8, TBADate));
  Result := TBADate(BoldMembers[8]);
end;

function TKlass_poiska._GetSeg_data: TDate;
begin
  Result := M_Seg_data.AsDate;
end;

procedure TKlass_poiska._SetSeg_data(const NewValue: TDate);
begin
  M_Seg_data.AsDate := NewValue;
end;

function TKlass_poiska._Get_M_Nomer_sled_vyp: TBAInteger;
begin
  assert(ValidateMember('TKlass_poiska', 'Nomer_sled_vyp', 9, TBAInteger));
  Result := TBAInteger(BoldMembers[9]);
end;

function TKlass_poiska._GetNomer_sled_vyp: Integer;
begin
  Result := M_Nomer_sled_vyp.AsInteger;
end;

procedure TKlass_poiska._SetNomer_sled_vyp(const NewValue: Integer);
begin
  M_Nomer_sled_vyp.AsInteger := NewValue;
end;

function TKlass_poiska._Get_M_God_sled_vyp: TBAInteger;
begin
  assert(ValidateMember('TKlass_poiska', 'God_sled_vyp', 10, TBAInteger));
  Result := TBAInteger(BoldMembers[10]);
end;

function TKlass_poiska._GetGod_sled_vyp: Integer;
begin
  Result := M_God_sled_vyp.AsInteger;
end;

procedure TKlass_poiska._SetGod_sled_vyp(const NewValue: Integer);
begin
  M_God_sled_vyp.AsInteger := NewValue;
end;

function TKlass_poiska._Get_M_Data_sled_vyp: TBADate;
begin
  assert(ValidateMember('TKlass_poiska', 'Data_sled_vyp', 11, TBADate));
  Result := TBADate(BoldMembers[11]);
end;

function TKlass_poiska._GetData_sled_vyp: TDate;
begin
  Result := M_Data_sled_vyp.AsDate;
end;

procedure TKlass_poiska._SetData_sled_vyp(const NewValue: TDate);
begin
  M_Data_sled_vyp.AsDate := NewValue;
end;

function TKlass_poiska._Get_M_Iskatj_dvoinikov: TBABoolean;
begin
  assert(ValidateMember('TKlass_poiska', 'Iskatj_dvoinikov', 12, TBABoolean));
  Result := TBABoolean(BoldMembers[12]);
end;

function TKlass_poiska._GetIskatj_dvoinikov: Boolean;
begin
  Result := M_Iskatj_dvoinikov.AsBoolean;
end;

procedure TKlass_poiska._SetIskatj_dvoinikov(const NewValue: Boolean);
begin
  M_Iskatj_dvoinikov.AsBoolean := NewValue;
end;

function TKlass_poiska._Get_M_Tek_izdanie_ident: TBAInteger;
begin
  assert(ValidateMember('TKlass_poiska', 'Tek_izdanie_ident', 13, TBAInteger));
  Result := TBAInteger(BoldMembers[13]);
end;

function TKlass_poiska._GetTek_izdanie_ident: Integer;
begin
  Result := M_Tek_izdanie_ident.AsInteger;
end;

procedure TKlass_poiska._SetTek_izdanie_ident(const NewValue: Integer);
begin
  M_Tek_izdanie_ident.AsInteger := NewValue;
end;

function TKlass_poiska._Getispoljz_razdel_poiska: TGazetaList;
begin
  assert(ValidateMember('TKlass_poiska', 'ispoljz_razdel_poiska', 14, TGazetaList));
  Result := TGazetaList(BoldMembers[14]);
end;

procedure TKlass_poiskaList.Add(NewObject: TKlass_poiska);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TKlass_poiskaList.IndexOf(anObject: TKlass_poiska): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TKlass_poiskaList.Includes(anObject: TKlass_poiska) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TKlass_poiskaList.AddNew: TKlass_poiska;
begin
  result := TKlass_poiska(InternalAddNew);
end;

procedure TKlass_poiskaList.Insert(index: Integer; NewObject: TKlass_poiska);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TKlass_poiskaList.GetBoldObject(index: Integer): TKlass_poiska;
begin
  result := TKlass_poiska(GetElement(index));
end;

procedure TKlass_poiskaList.SetBoldObject(index: Integer; NewObject: TKlass_poiska);
begin;
  SetElement(index, NewObject);
end;

{ TLog_operacii }

function TLog_operacii._Get_M_Naimenovanie_operacii: TBAString;
begin
  assert(ValidateMember('TLog_operacii', 'Naimenovanie_operacii', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TLog_operacii._GetNaimenovanie_operacii: String;
begin
  Result := M_Naimenovanie_operacii.AsString;
end;

procedure TLog_operacii._SetNaimenovanie_operacii(const NewValue: String);
begin
  M_Naimenovanie_operacii.AsString := NewValue;
end;

function TLog_operacii._Get_M_Subjekt: TBAString;
begin
  assert(ValidateMember('TLog_operacii', 'Subjekt', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TLog_operacii._GetSubjekt: String;
begin
  Result := M_Subjekt.AsString;
end;

function TLog_operacii._Get_M_Data_i_vremya: TBAString;
begin
  assert(ValidateMember('TLog_operacii', 'Data_i_vremya', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TLog_operacii._GetData_i_vremya: String;
begin
  Result := M_Data_i_vremya.AsString;
end;

function TLog_operacii._Get_M_Data: TBADate;
begin
  assert(ValidateMember('TLog_operacii', 'Data', 3, TBADate));
  Result := TBADate(BoldMembers[3]);
end;

function TLog_operacii._GetData: TDate;
begin
  Result := M_Data.AsDate;
end;

procedure TLog_operacii._SetData(const NewValue: TDate);
begin
  M_Data.AsDate := NewValue;
end;

function TLog_operacii._Get_M_Vremya: TBAString;
begin
  assert(ValidateMember('TLog_operacii', 'Vremya', 4, TBAString));
  Result := TBAString(BoldMembers[4]);
end;

function TLog_operacii._GetVremya: String;
begin
  Result := M_Vremya.AsString;
end;

procedure TLog_operacii._SetVremya(const NewValue: String);
begin
  M_Vremya.AsString := NewValue;
end;

function TLog_operacii._Get_M_ot_deistvii: TBoldObjectReference;
begin
  assert(ValidateMember('TLog_operacii', 'ot_deistvii', 5, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[5]);
end;

function TLog_operacii._Getot_deistvii: TPersonal;
begin
  assert(not assigned(M_ot_deistvii.BoldObject) or (M_ot_deistvii.BoldObject is TPersonal), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'ot_deistvii', M_ot_deistvii.BoldObject.ClassName, 'TPersonal']));
  Result := TPersonal(M_ot_deistvii.BoldObject);
end;

procedure TLog_operacii._Setot_deistvii(const value: TPersonal);
begin
  M_ot_deistvii.BoldObject := value;
end;

procedure TLog_operaciiList.Add(NewObject: TLog_operacii);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TLog_operaciiList.IndexOf(anObject: TLog_operacii): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TLog_operaciiList.Includes(anObject: TLog_operacii) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TLog_operaciiList.AddNew: TLog_operacii;
begin
  result := TLog_operacii(InternalAddNew);
end;

procedure TLog_operaciiList.Insert(index: Integer; NewObject: TLog_operacii);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TLog_operaciiList.GetBoldObject(index: Integer): TLog_operacii;
begin
  result := TLog_operacii(GetElement(index));
end;

procedure TLog_operaciiList.SetBoldObject(index: Integer; NewObject: TLog_operacii);
begin;
  SetElement(index, NewObject);
end;

{ TNomer_vyhoda }

function TNomer_vyhoda._Get_M_Nomer: TBAInteger;
begin
  assert(ValidateMember('TNomer_vyhoda', 'Nomer', 0, TBAInteger));
  Result := TBAInteger(BoldMembers[0]);
end;

function TNomer_vyhoda._GetNomer: Integer;
begin
  Result := M_Nomer.AsInteger;
end;

procedure TNomer_vyhoda._SetNomer(const NewValue: Integer);
begin
  M_Nomer.AsInteger := NewValue;
end;

function TNomer_vyhoda._Get_M_God: TBAInteger;
begin
  assert(ValidateMember('TNomer_vyhoda', 'God', 1, TBAInteger));
  Result := TBAInteger(BoldMembers[1]);
end;

function TNomer_vyhoda._GetGod: Integer;
begin
  Result := M_God.AsInteger;
end;

procedure TNomer_vyhoda._SetGod(const NewValue: Integer);
begin
  M_God.AsInteger := NewValue;
end;

function TNomer_vyhoda._Get_M_Vyhodit: TBABoolean;
begin
  assert(ValidateMember('TNomer_vyhoda', 'Vyhodit', 2, TBABoolean));
  Result := TBABoolean(BoldMembers[2]);
end;

function TNomer_vyhoda._GetVyhodit: Boolean;
begin
  Result := M_Vyhodit.AsBoolean;
end;

procedure TNomer_vyhoda._SetVyhodit(const NewValue: Boolean);
begin
  M_Vyhodit.AsBoolean := NewValue;
end;

function TNomer_vyhoda._Get_M_Vhodit_v_ukaz_period: TBABoolean;
begin
  assert(ValidateMember('TNomer_vyhoda', 'Vhodit_v_ukaz_period', 3, TBABoolean));
  Result := TBABoolean(BoldMembers[3]);
end;

function TNomer_vyhoda._GetVhodit_v_ukaz_period: Boolean;
begin
  Result := M_Vhodit_v_ukaz_period.AsBoolean;
end;

function TNomer_vyhoda._Get_M_opred_vyhod_po_nom: TBoldObjectReference;
begin
  assert(ValidateMember('TNomer_vyhoda', 'opred_vyhod_po_nom', 4, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[4]);
end;

function TNomer_vyhoda._Getopred_vyhod_po_nom: TObjyavlenie;
begin
  assert(not assigned(M_opred_vyhod_po_nom.BoldObject) or (M_opred_vyhod_po_nom.BoldObject is TObjyavlenie), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'opred_vyhod_po_nom', M_opred_vyhod_po_nom.BoldObject.ClassName, 'TObjyavlenie']));
  Result := TObjyavlenie(M_opred_vyhod_po_nom.BoldObject);
end;

procedure TNomer_vyhoda._Setopred_vyhod_po_nom(const value: TObjyavlenie);
begin
  M_opred_vyhod_po_nom.BoldObject := value;
end;

procedure TNomer_vyhodaList.Add(NewObject: TNomer_vyhoda);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TNomer_vyhodaList.IndexOf(anObject: TNomer_vyhoda): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TNomer_vyhodaList.Includes(anObject: TNomer_vyhoda) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TNomer_vyhodaList.AddNew: TNomer_vyhoda;
begin
  result := TNomer_vyhoda(InternalAddNew);
end;

procedure TNomer_vyhodaList.Insert(index: Integer; NewObject: TNomer_vyhoda);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TNomer_vyhodaList.GetBoldObject(index: Integer): TNomer_vyhoda;
begin
  result := TNomer_vyhoda(GetElement(index));
end;

procedure TNomer_vyhodaList.SetBoldObject(index: Integer; NewObject: TNomer_vyhoda);
begin;
  SetElement(index, NewObject);
end;

{ TPersona }

function TPersona._Get_M_Familiya: TBAString;
begin
  assert(ValidateMember('TPersona', 'Familiya', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TPersona._GetFamiliya: String;
begin
  Result := M_Familiya.AsString;
end;

procedure TPersona._SetFamiliya(const NewValue: String);
begin
  M_Familiya.AsString := NewValue;
end;

function TPersona._Get_M_Imya: TBAString;
begin
  assert(ValidateMember('TPersona', 'Imya', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TPersona._GetImya: String;
begin
  Result := M_Imya.AsString;
end;

procedure TPersona._SetImya(const NewValue: String);
begin
  M_Imya.AsString := NewValue;
end;

function TPersona._Get_M_Otchestvo: TBAString;
begin
  assert(ValidateMember('TPersona', 'Otchestvo', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TPersona._GetOtchestvo: String;
begin
  Result := M_Otchestvo.AsString;
end;

procedure TPersona._SetOtchestvo(const NewValue: String);
begin
  M_Otchestvo.AsString := NewValue;
end;

function TPersona._Get_M_Ulica: TBAString;
begin
  assert(ValidateMember('TPersona', 'Ulica', 3, TBAString));
  Result := TBAString(BoldMembers[3]);
end;

function TPersona._GetUlica: String;
begin
  Result := M_Ulica.AsString;
end;

procedure TPersona._SetUlica(const NewValue: String);
begin
  M_Ulica.AsString := NewValue;
end;

function TPersona._Get_M_Dom: TBAInteger;
begin
  assert(ValidateMember('TPersona', 'Dom', 4, TBAInteger));
  Result := TBAInteger(BoldMembers[4]);
end;

function TPersona._GetDom: Integer;
begin
  Result := M_Dom.AsInteger;
end;

procedure TPersona._SetDom(const NewValue: Integer);
begin
  M_Dom.AsInteger := NewValue;
end;

function TPersona._Get_M_Kvartira: TBAInteger;
begin
  assert(ValidateMember('TPersona', 'Kvartira', 5, TBAInteger));
  Result := TBAInteger(BoldMembers[5]);
end;

function TPersona._GetKvartira: Integer;
begin
  Result := M_Kvartira.AsInteger;
end;

procedure TPersona._SetKvartira(const NewValue: Integer);
begin
  M_Kvartira.AsInteger := NewValue;
end;

function TPersona._Get_M_Korpus: TBAInteger;
begin
  assert(ValidateMember('TPersona', 'Korpus', 6, TBAInteger));
  Result := TBAInteger(BoldMembers[6]);
end;

function TPersona._GetKorpus: Integer;
begin
  Result := M_Korpus.AsInteger;
end;

procedure TPersona._SetKorpus(const NewValue: Integer);
begin
  M_Korpus.AsInteger := NewValue;
end;

function TPersona._Get_M_Mobiljnyi_telefon: TBAString;
begin
  assert(ValidateMember('TPersona', 'Mobiljnyi_telefon', 7, TBAString));
  Result := TBAString(BoldMembers[7]);
end;

function TPersona._GetMobiljnyi_telefon: String;
begin
  Result := M_Mobiljnyi_telefon.AsString;
end;

procedure TPersona._SetMobiljnyi_telefon(const NewValue: String);
begin
  M_Mobiljnyi_telefon.AsString := NewValue;
end;

function TPersona._Get_M_Rabochii_telefon: TBAString;
begin
  assert(ValidateMember('TPersona', 'Rabochii_telefon', 8, TBAString));
  Result := TBAString(BoldMembers[8]);
end;

function TPersona._GetRabochii_telefon: String;
begin
  Result := M_Rabochii_telefon.AsString;
end;

procedure TPersona._SetRabochii_telefon(const NewValue: String);
begin
  M_Rabochii_telefon.AsString := NewValue;
end;

function TPersona._Get_M_Domashnii_telefon: TBAString;
begin
  assert(ValidateMember('TPersona', 'Domashnii_telefon', 9, TBAString));
  Result := TBAString(BoldMembers[9]);
end;

function TPersona._GetDomashnii_telefon: String;
begin
  Result := M_Domashnii_telefon.AsString;
end;

procedure TPersona._SetDomashnii_telefon(const NewValue: String);
begin
  M_Domashnii_telefon.AsString := NewValue;
end;

function TPersona._Get_M_Elektronnyi_adres: TBAString;
begin
  assert(ValidateMember('TPersona', 'Elektronnyi_adres', 10, TBAString));
  Result := TBAString(BoldMembers[10]);
end;

function TPersona._GetElektronnyi_adres: String;
begin
  Result := M_Elektronnyi_adres.AsString;
end;

procedure TPersona._SetElektronnyi_adres(const NewValue: String);
begin
  M_Elektronnyi_adres.AsString := NewValue;
end;

function TPersona._Get_M_Polnoe_imya: TBAString;
begin
  assert(ValidateMember('TPersona', 'Polnoe_imya', 11, TBAString));
  Result := TBAString(BoldMembers[11]);
end;

function TPersona._GetPolnoe_imya: String;
begin
  Result := M_Polnoe_imya.AsString;
end;

procedure TPersonaList.Add(NewObject: TPersona);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TPersonaList.IndexOf(anObject: TPersona): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TPersonaList.Includes(anObject: TPersona) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TPersonaList.AddNew: TPersona;
begin
  result := TPersona(InternalAddNew);
end;

procedure TPersonaList.Insert(index: Integer; NewObject: TPersona);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TPersonaList.GetBoldObject(index: Integer): TPersona;
begin
  result := TPersona(GetElement(index));
end;

procedure TPersonaList.SetBoldObject(index: Integer; NewObject: TPersona);
begin;
  SetElement(index, NewObject);
end;

{ TSpravochnik }

function TSpravochnik._Get_M_Naimenovanie: TBAString;
begin
  assert(ValidateMember('TSpravochnik', 'Naimenovanie', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TSpravochnik._GetNaimenovanie: String;
begin
  Result := M_Naimenovanie.AsString;
end;

procedure TSpravochnik._SetNaimenovanie(const NewValue: String);
begin
  M_Naimenovanie.AsString := NewValue;
end;

function TSpravochnik._Get_M_Kommentarii: TBAString;
begin
  assert(ValidateMember('TSpravochnik', 'Kommentarii', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TSpravochnik._GetKommentarii: String;
begin
  Result := M_Kommentarii.AsString;
end;

procedure TSpravochnik._SetKommentarii(const NewValue: String);
begin
  M_Kommentarii.AsString := NewValue;
end;

function TSpravochnik._Get_M_Identifikator: TBAInteger;
begin
  assert(ValidateMember('TSpravochnik', 'Identifikator', 2, TBAInteger));
  Result := TBAInteger(BoldMembers[2]);
end;

function TSpravochnik._GetIdentifikator: Integer;
begin
  Result := M_Identifikator.AsInteger;
end;

procedure TSpravochnik._SetIdentifikator(const NewValue: Integer);
begin
  M_Identifikator.AsInteger := NewValue;
end;

procedure TSpravochnikList.Add(NewObject: TSpravochnik);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TSpravochnikList.IndexOf(anObject: TSpravochnik): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TSpravochnikList.Includes(anObject: TSpravochnik) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TSpravochnikList.AddNew: TSpravochnik;
begin
  result := TSpravochnik(InternalAddNew);
end;

procedure TSpravochnikList.Insert(index: Integer; NewObject: TSpravochnik);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TSpravochnikList.GetBoldObject(index: Integer): TSpravochnik;
begin
  result := TSpravochnik(GetElement(index));
end;

procedure TSpravochnikList.SetBoldObject(index: Integer; NewObject: TSpravochnik);
begin;
  SetElement(index, NewObject);
end;

{ TSpravochnik_grupp_vypuskov }

procedure TSpravochnik_grupp_vypuskovList.Add(NewObject: TSpravochnik_grupp_vypuskov);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TSpravochnik_grupp_vypuskovList.IndexOf(anObject: TSpravochnik_grupp_vypuskov): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TSpravochnik_grupp_vypuskovList.Includes(anObject: TSpravochnik_grupp_vypuskov) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TSpravochnik_grupp_vypuskovList.AddNew: TSpravochnik_grupp_vypuskov;
begin
  result := TSpravochnik_grupp_vypuskov(InternalAddNew);
end;

procedure TSpravochnik_grupp_vypuskovList.Insert(index: Integer; NewObject: TSpravochnik_grupp_vypuskov);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TSpravochnik_grupp_vypuskovList.GetBoldObject(index: Integer): TSpravochnik_grupp_vypuskov;
begin
  result := TSpravochnik_grupp_vypuskov(GetElement(index));
end;

procedure TSpravochnik_grupp_vypuskovList.SetBoldObject(index: Integer; NewObject: TSpravochnik_grupp_vypuskov);
begin;
  SetElement(index, NewObject);
end;

{ TShablon_objyavleniya }

function TShablon_objyavleniya._Get_M_Imya_tipa_ramki: TBAString;
begin
  assert(ValidateMember('TShablon_objyavleniya', 'Imya_tipa_ramki', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TShablon_objyavleniya._GetImya_tipa_ramki: String;
begin
  Result := M_Imya_tipa_ramki.AsString;
end;

function TShablon_objyavleniya._Get_M_Imya_tipa_fona: TBAString;
begin
  assert(ValidateMember('TShablon_objyavleniya', 'Imya_tipa_fona', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TShablon_objyavleniya._GetImya_tipa_fona: String;
begin
  Result := M_Imya_tipa_fona.AsString;
end;

function TShablon_objyavleniya._Get_M_Imya_tolsh_linii: TBAString;
begin
  assert(ValidateMember('TShablon_objyavleniya', 'Imya_tolsh_linii', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TShablon_objyavleniya._GetImya_tolsh_linii: String;
begin
  Result := M_Imya_tolsh_linii.AsString;
end;

function TShablon_objyavleniya._Get_M_Ne_opredelena_ramka: TBABoolean;
begin
  assert(ValidateMember('TShablon_objyavleniya', 'Ne_opredelena_ramka', 3, TBABoolean));
  Result := TBABoolean(BoldMembers[3]);
end;

function TShablon_objyavleniya._GetNe_opredelena_ramka: Boolean;
begin
  Result := M_Ne_opredelena_ramka.AsBoolean;
end;

function TShablon_objyavleniya._Get_M_Tolshina_linii: TBAFloat;
begin
  assert(ValidateMember('TShablon_objyavleniya', 'Tolshina_linii', 4, TBAFloat));
  Result := TBAFloat(BoldMembers[4]);
end;

function TShablon_objyavleniya._GetTolshina_linii: double;
begin
  Result := M_Tolshina_linii.AsFloat;
end;

function TShablon_objyavleniya._Get_M_Ukazatj_parametry_ramki: TBABoolean;
begin
  assert(ValidateMember('TShablon_objyavleniya', 'Ukazatj_parametry_ramki', 5, TBABoolean));
  Result := TBABoolean(BoldMembers[5]);
end;

function TShablon_objyavleniya._GetUkazatj_parametry_ramki: Boolean;
begin
  Result := M_Ukazatj_parametry_ramki.AsBoolean;
end;

procedure TShablon_objyavleniya._SetUkazatj_parametry_ramki(const NewValue: Boolean);
begin
  M_Ukazatj_parametry_ramki.AsBoolean := NewValue;
end;

function TShablon_objyavleniya._Get_M_Shirina_ramki: TBAFloat;
begin
  assert(ValidateMember('TShablon_objyavleniya', 'Shirina_ramki', 6, TBAFloat));
  Result := TBAFloat(BoldMembers[6]);
end;

function TShablon_objyavleniya._GetShirina_ramki: double;
begin
  Result := M_Shirina_ramki.AsFloat;
end;

procedure TShablon_objyavleniya._SetShirina_ramki(const NewValue: double);
begin
  M_Shirina_ramki.AsFloat := NewValue;
end;

function TShablon_objyavleniya._Get_M_Dlina_ramki: TBAFloat;
begin
  assert(ValidateMember('TShablon_objyavleniya', 'Dlina_ramki', 7, TBAFloat));
  Result := TBAFloat(BoldMembers[7]);
end;

function TShablon_objyavleniya._GetDlina_ramki: double;
begin
  Result := M_Dlina_ramki.AsFloat;
end;

procedure TShablon_objyavleniya._SetDlina_ramki(const NewValue: double);
begin
  M_Dlina_ramki.AsFloat := NewValue;
end;

function TShablon_objyavleniya._Get_M_OtstupSverhu: TBAFloat;
begin
  assert(ValidateMember('TShablon_objyavleniya', 'OtstupSverhu', 8, TBAFloat));
  Result := TBAFloat(BoldMembers[8]);
end;

function TShablon_objyavleniya._GetOtstupSverhu: double;
begin
  Result := M_OtstupSverhu.AsFloat;
end;

procedure TShablon_objyavleniya._SetOtstupSverhu(const NewValue: double);
begin
  M_OtstupSverhu.AsFloat := NewValue;
end;

function TShablon_objyavleniya._Get_M_OtstupSnizu: TBAFloat;
begin
  assert(ValidateMember('TShablon_objyavleniya', 'OtstupSnizu', 9, TBAFloat));
  Result := TBAFloat(BoldMembers[9]);
end;

function TShablon_objyavleniya._GetOtstupSnizu: double;
begin
  Result := M_OtstupSnizu.AsFloat;
end;

procedure TShablon_objyavleniya._SetOtstupSnizu(const NewValue: double);
begin
  M_OtstupSnizu.AsFloat := NewValue;
end;

function TShablon_objyavleniya._Get_M_OtstupSprava: TBAFloat;
begin
  assert(ValidateMember('TShablon_objyavleniya', 'OtstupSprava', 10, TBAFloat));
  Result := TBAFloat(BoldMembers[10]);
end;

function TShablon_objyavleniya._GetOtstupSprava: double;
begin
  Result := M_OtstupSprava.AsFloat;
end;

procedure TShablon_objyavleniya._SetOtstupSprava(const NewValue: double);
begin
  M_OtstupSprava.AsFloat := NewValue;
end;

function TShablon_objyavleniya._Get_M_OtstupSleva: TBAFloat;
begin
  assert(ValidateMember('TShablon_objyavleniya', 'OtstupSleva', 11, TBAFloat));
  Result := TBAFloat(BoldMembers[11]);
end;

function TShablon_objyavleniya._GetOtstupSleva: double;
begin
  Result := M_OtstupSleva.AsFloat;
end;

procedure TShablon_objyavleniya._SetOtstupSleva(const NewValue: double);
begin
  M_OtstupSleva.AsFloat := NewValue;
end;

function TShablon_objyavleniya._Get_M_Interval_strochn: TBAFloat;
begin
  assert(ValidateMember('TShablon_objyavleniya', 'Interval_strochn', 12, TBAFloat));
  Result := TBAFloat(BoldMembers[12]);
end;

function TShablon_objyavleniya._GetInterval_strochn: double;
begin
  Result := M_Interval_strochn.AsFloat;
end;

procedure TShablon_objyavleniya._SetInterval_strochn(const NewValue: double);
begin
  M_Interval_strochn.AsFloat := NewValue;
end;

function TShablon_objyavleniya._Get_M_opredelyaet_tip_ramki_dlya: TBoldObjectReference;
begin
  assert(ValidateMember('TShablon_objyavleniya', 'opredelyaet_tip_ramki_dlya', 13, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[13]);
end;

function TShablon_objyavleniya._Getopredelyaet_tip_ramki_dlya: TTip_ramki;
begin
  assert(not assigned(M_opredelyaet_tip_ramki_dlya.BoldObject) or (M_opredelyaet_tip_ramki_dlya.BoldObject is TTip_ramki), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'opredelyaet_tip_ramki_dlya', M_opredelyaet_tip_ramki_dlya.BoldObject.ClassName, 'TTip_ramki']));
  Result := TTip_ramki(M_opredelyaet_tip_ramki_dlya.BoldObject);
end;

procedure TShablon_objyavleniya._Setopredelyaet_tip_ramki_dlya(const value: TTip_ramki);
begin
  M_opredelyaet_tip_ramki_dlya.BoldObject := value;
end;

function TShablon_objyavleniya._Get_M_opr_tip_fona_dlya: TBoldObjectReference;
begin
  assert(ValidateMember('TShablon_objyavleniya', 'opr_tip_fona_dlya', 14, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[14]);
end;

function TShablon_objyavleniya._Getopr_tip_fona_dlya: TTip_fona;
begin
  assert(not assigned(M_opr_tip_fona_dlya.BoldObject) or (M_opr_tip_fona_dlya.BoldObject is TTip_fona), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'opr_tip_fona_dlya', M_opr_tip_fona_dlya.BoldObject.ClassName, 'TTip_fona']));
  Result := TTip_fona(M_opr_tip_fona_dlya.BoldObject);
end;

procedure TShablon_objyavleniya._Setopr_tip_fona_dlya(const value: TTip_fona);
begin
  M_opr_tip_fona_dlya.BoldObject := value;
end;

function TShablon_objyavleniya._Get_M_opr_tolsh_ramki_dlya: TBoldObjectReference;
begin
  assert(ValidateMember('TShablon_objyavleniya', 'opr_tolsh_ramki_dlya', 15, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[15]);
end;

function TShablon_objyavleniya._Getopr_tolsh_ramki_dlya: TTolshina_linii;
begin
  assert(not assigned(M_opr_tolsh_ramki_dlya.BoldObject) or (M_opr_tolsh_ramki_dlya.BoldObject is TTolshina_linii), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'opr_tolsh_ramki_dlya', M_opr_tolsh_ramki_dlya.BoldObject.ClassName, 'TTolshina_linii']));
  Result := TTolshina_linii(M_opr_tolsh_ramki_dlya.BoldObject);
end;

procedure TShablon_objyavleniya._Setopr_tolsh_ramki_dlya(const value: TTolshina_linii);
begin
  M_opr_tolsh_ramki_dlya.BoldObject := value;
end;

procedure TShablon_objyavleniyaList.Add(NewObject: TShablon_objyavleniya);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TShablon_objyavleniyaList.IndexOf(anObject: TShablon_objyavleniya): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TShablon_objyavleniyaList.Includes(anObject: TShablon_objyavleniya) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TShablon_objyavleniyaList.AddNew: TShablon_objyavleniya;
begin
  result := TShablon_objyavleniya(InternalAddNew);
end;

procedure TShablon_objyavleniyaList.Insert(index: Integer; NewObject: TShablon_objyavleniya);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TShablon_objyavleniyaList.GetBoldObject(index: Integer): TShablon_objyavleniya;
begin
  result := TShablon_objyavleniya(GetElement(index));
end;

procedure TShablon_objyavleniyaList.SetBoldObject(index: Integer; NewObject: TShablon_objyavleniya);
begin;
  SetElement(index, NewObject);
end;

{ TShablon_razdela }

function TShablon_razdela._Get_M_Tip_razdelitelya: TBAString;
begin
  assert(ValidateMember('TShablon_razdela', 'Tip_razdelitelya', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TShablon_razdela._GetTip_razdelitelya: String;
begin
  Result := M_Tip_razdelitelya.AsString;
end;

procedure TShablon_razdela._SetTip_razdelitelya(const NewValue: String);
begin
  M_Tip_razdelitelya.AsString := NewValue;
end;

function TShablon_razdela._Get_M_Isp_dlya_razdeleniya: TBoldObjectReference;
begin
  assert(ValidateMember('TShablon_razdela', 'Isp_dlya_razdeleniya', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function TShablon_razdela._GetIsp_dlya_razdeleniya: TTip_razdelitelya;
begin
  assert(not assigned(M_Isp_dlya_razdeleniya.BoldObject) or (M_Isp_dlya_razdeleniya.BoldObject is TTip_razdelitelya), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Isp_dlya_razdeleniya', M_Isp_dlya_razdeleniya.BoldObject.ClassName, 'TTip_razdelitelya']));
  Result := TTip_razdelitelya(M_Isp_dlya_razdeleniya.BoldObject);
end;

procedure TShablon_razdela._SetIsp_dlya_razdeleniya(const value: TTip_razdelitelya);
begin
  M_Isp_dlya_razdeleniya.BoldObject := value;
end;

procedure TShablon_razdelaList.Add(NewObject: TShablon_razdela);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TShablon_razdelaList.IndexOf(anObject: TShablon_razdela): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TShablon_razdelaList.Includes(anObject: TShablon_razdela) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TShablon_razdelaList.AddNew: TShablon_razdela;
begin
  result := TShablon_razdela(InternalAddNew);
end;

procedure TShablon_razdelaList.Insert(index: Integer; NewObject: TShablon_razdela);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TShablon_razdelaList.GetBoldObject(index: Integer): TShablon_razdela;
begin
  result := TShablon_razdela(GetElement(index));
end;

procedure TShablon_razdelaList.SetBoldObject(index: Integer; NewObject: TShablon_razdela);
begin;
  SetElement(index, NewObject);
end;

{ TOrganizaciya }

function TOrganizaciya._Get_M_Strana: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Strana', 12, TBAString));
  Result := TBAString(BoldMembers[12]);
end;

function TOrganizaciya._GetStrana: String;
begin
  Result := M_Strana.AsString;
end;

procedure TOrganizaciya._SetStrana(const NewValue: String);
begin
  M_Strana.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Oblastj: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Oblastj', 13, TBAString));
  Result := TBAString(BoldMembers[13]);
end;

function TOrganizaciya._GetOblastj: String;
begin
  Result := M_Oblastj.AsString;
end;

procedure TOrganizaciya._SetOblastj(const NewValue: String);
begin
  M_Oblastj.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Gorod: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Gorod', 14, TBAString));
  Result := TBAString(BoldMembers[14]);
end;

function TOrganizaciya._GetGorod: String;
begin
  Result := M_Gorod.AsString;
end;

procedure TOrganizaciya._SetGorod(const NewValue: String);
begin
  M_Gorod.AsString := NewValue;
end;

function TOrganizaciya._Get_M_BIK: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'BIK', 15, TBAString));
  Result := TBAString(BoldMembers[15]);
end;

function TOrganizaciya._GetBIK: String;
begin
  Result := M_BIK.AsString;
end;

procedure TOrganizaciya._SetBIK(const NewValue: String);
begin
  M_BIK.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Naimenovanie: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Naimenovanie', 16, TBAString));
  Result := TBAString(BoldMembers[16]);
end;

function TOrganizaciya._GetNaimenovanie: String;
begin
  Result := M_Naimenovanie.AsString;
end;

procedure TOrganizaciya._SetNaimenovanie(const NewValue: String);
begin
  M_Naimenovanie.AsString := NewValue;
end;

function TOrganizaciya._Get_M_YavlyaetsyaVlad: TBABoolean;
begin
  assert(ValidateMember('TOrganizaciya', 'YavlyaetsyaVlad', 17, TBABoolean));
  Result := TBABoolean(BoldMembers[17]);
end;

function TOrganizaciya._GetYavlyaetsyaVlad: Boolean;
begin
  Result := M_YavlyaetsyaVlad.AsBoolean;
end;

procedure TOrganizaciya._SetYavlyaetsyaVlad(const NewValue: Boolean);
begin
  M_YavlyaetsyaVlad.AsBoolean := NewValue;
end;

function TOrganizaciya._Get_M_Rukovoditelj: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Rukovoditelj', 18, TBAString));
  Result := TBAString(BoldMembers[18]);
end;

function TOrganizaciya._GetRukovoditelj: String;
begin
  Result := M_Rukovoditelj.AsString;
end;

procedure TOrganizaciya._SetRukovoditelj(const NewValue: String);
begin
  M_Rukovoditelj.AsString := NewValue;
end;

function TOrganizaciya._Get_M_GlBuhgalter: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'GlBuhgalter', 19, TBAString));
  Result := TBAString(BoldMembers[19]);
end;

function TOrganizaciya._GetGlBuhgalter: String;
begin
  Result := M_GlBuhgalter.AsString;
end;

procedure TOrganizaciya._SetGlBuhgalter(const NewValue: String);
begin
  M_GlBuhgalter.AsString := NewValue;
end;

function TOrganizaciya._Get_M_INN: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'INN', 20, TBAString));
  Result := TBAString(BoldMembers[20]);
end;

function TOrganizaciya._GetINN: String;
begin
  Result := M_INN.AsString;
end;

procedure TOrganizaciya._SetINN(const NewValue: String);
begin
  M_INN.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Rasch__schet: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Rasch__schet', 21, TBAString));
  Result := TBAString(BoldMembers[21]);
end;

function TOrganizaciya._GetRasch__schet: String;
begin
  Result := M_Rasch__schet.AsString;
end;

procedure TOrganizaciya._SetRasch__schet(const NewValue: String);
begin
  M_Rasch__schet.AsString := NewValue;
end;

function TOrganizaciya._Get_M_KPP: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'KPP', 22, TBAString));
  Result := TBAString(BoldMembers[22]);
end;

function TOrganizaciya._GetKPP: String;
begin
  Result := M_KPP.AsString;
end;

procedure TOrganizaciya._SetKPP(const NewValue: String);
begin
  M_KPP.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Tip_organizacii: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Tip_organizacii', 23, TBAString));
  Result := TBAString(BoldMembers[23]);
end;

function TOrganizaciya._GetTip_organizacii: String;
begin
  Result := M_Tip_organizacii.AsString;
end;

procedure TOrganizaciya._SetTip_organizacii(const NewValue: String);
begin
  M_Tip_organizacii.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Kor_schet: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Kor_schet', 24, TBAString));
  Result := TBAString(BoldMembers[24]);
end;

function TOrganizaciya._GetKor_schet: String;
begin
  Result := M_Kor_schet.AsString;
end;

procedure TOrganizaciya._SetKor_schet(const NewValue: String);
begin
  M_Kor_schet.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Naim__banka: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Naim__banka', 25, TBAString));
  Result := TBAString(BoldMembers[25]);
end;

function TOrganizaciya._GetNaim__banka: String;
begin
  Result := M_Naim__banka.AsString;
end;

procedure TOrganizaciya._SetNaim__banka(const NewValue: String);
begin
  M_Naim__banka.AsString := NewValue;
end;

procedure TOrganizaciyaList.Add(NewObject: TOrganizaciya);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TOrganizaciyaList.IndexOf(anObject: TOrganizaciya): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TOrganizaciyaList.Includes(anObject: TOrganizaciya) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TOrganizaciyaList.AddNew: TOrganizaciya;
begin
  result := TOrganizaciya(InternalAddNew);
end;

procedure TOrganizaciyaList.Insert(index: Integer; NewObject: TOrganizaciya);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TOrganizaciyaList.GetBoldObject(index: Integer): TOrganizaciya;
begin
  result := TOrganizaciya(GetElement(index));
end;

procedure TOrganizaciyaList.SetBoldObject(index: Integer; NewObject: TOrganizaciya);
begin;
  SetElement(index, NewObject);
end;

{ TGazeta }

function TGazeta._Get_M_Iskatj_v_gazete: TBABoolean;
begin
  assert(ValidateMember('TGazeta', 'Iskatj_v_gazete', 3, TBABoolean));
  Result := TBABoolean(BoldMembers[3]);
end;

function TGazeta._GetIskatj_v_gazete: Boolean;
begin
  Result := M_Iskatj_v_gazete.AsBoolean;
end;

procedure TGazeta._SetIskatj_v_gazete(const NewValue: Boolean);
begin
  M_Iskatj_v_gazete.AsBoolean := NewValue;
end;

function TGazeta._Get_M_Posledn_vypusk_data: TBADate;
begin
  assert(ValidateMember('TGazeta', 'Posledn_vypusk_data', 4, TBADate));
  Result := TBADate(BoldMembers[4]);
end;

function TGazeta._GetPosledn_vypusk_data: TDate;
begin
  Result := M_Posledn_vypusk_data.AsDate;
end;

function TGazeta._Get_M_Tekushii_vyp_identifikator: TBAFloat;
begin
  assert(ValidateMember('TGazeta', 'Tekushii_vyp_identifikator', 5, TBAFloat));
  Result := TBAFloat(BoldMembers[5]);
end;

function TGazeta._GetTekushii_vyp_identifikator: double;
begin
  Result := M_Tekushii_vyp_identifikator.AsFloat;
end;

procedure TGazeta._SetTekushii_vyp_identifikator(const NewValue: double);
begin
  M_Tekushii_vyp_identifikator.AsFloat := NewValue;
end;

function TGazeta._Get_M_Tekushii_vyp_data: TBADate;
begin
  assert(ValidateMember('TGazeta', 'Tekushii_vyp_data', 6, TBADate));
  Result := TBADate(BoldMembers[6]);
end;

function TGazeta._GetTekushii_vyp_data: TDate;
begin
  Result := M_Tekushii_vyp_data.AsDate;
end;

function TGazeta._Get_M_Poslednii_vyp_identifikator: TBAFloat;
begin
  assert(ValidateMember('TGazeta', 'Poslednii_vyp_identifikator', 7, TBAFloat));
  Result := TBAFloat(BoldMembers[7]);
end;

function TGazeta._GetPoslednii_vyp_identifikator: double;
begin
  Result := M_Poslednii_vyp_identifikator.AsFloat;
end;

function TGazeta._Get_M_Nomer_posl_vypuska: TBAInteger;
begin
  assert(ValidateMember('TGazeta', 'Nomer_posl_vypuska', 8, TBAInteger));
  Result := TBAInteger(BoldMembers[8]);
end;

function TGazeta._GetNomer_posl_vypuska: Integer;
begin
  Result := M_Nomer_posl_vypuska.AsInteger;
end;

function TGazeta._Get_M_Ident_pred_vypuska: TBAFloat;
begin
  assert(ValidateMember('TGazeta', 'Ident_pred_vypuska', 9, TBAFloat));
  Result := TBAFloat(BoldMembers[9]);
end;

function TGazeta._GetIdent_pred_vypuska: double;
begin
  Result := M_Ident_pred_vypuska.AsFloat;
end;

function TGazeta._Get_M_Ustan_ident_pred_vypuska: TBAFloat;
begin
  assert(ValidateMember('TGazeta', 'Ustan_ident_pred_vypuska', 10, TBAFloat));
  Result := TBAFloat(BoldMembers[10]);
end;

function TGazeta._GetUstan_ident_pred_vypuska: double;
begin
  Result := M_Ustan_ident_pred_vypuska.AsFloat;
end;

procedure TGazeta._SetUstan_ident_pred_vypuska(const NewValue: double);
begin
  M_Ustan_ident_pred_vypuska.AsFloat := NewValue;
end;

function TGazeta._Get_M_Nomer_predposl_vypuska: TBAInteger;
begin
  assert(ValidateMember('TGazeta', 'Nomer_predposl_vypuska', 11, TBAInteger));
  Result := TBAInteger(BoldMembers[11]);
end;

function TGazeta._GetNomer_predposl_vypuska: Integer;
begin
  Result := M_Nomer_predposl_vypuska.AsInteger;
end;

function TGazeta._Get_M_Filjtr_po_klientu: TBABoolean;
begin
  assert(ValidateMember('TGazeta', 'Filjtr_po_klientu', 12, TBABoolean));
  Result := TBABoolean(BoldMembers[12]);
end;

function TGazeta._GetFiljtr_po_klientu: Boolean;
begin
  Result := M_Filjtr_po_klientu.AsBoolean;
end;

procedure TGazeta._SetFiljtr_po_klientu(const NewValue: Boolean);
begin
  M_Filjtr_po_klientu.AsBoolean := NewValue;
end;

function TGazeta._Get_M_Filjtr_po_personalu: TBABoolean;
begin
  assert(ValidateMember('TGazeta', 'Filjtr_po_personalu', 13, TBABoolean));
  Result := TBABoolean(BoldMembers[13]);
end;

function TGazeta._GetFiljtr_po_personalu: Boolean;
begin
  Result := M_Filjtr_po_personalu.AsBoolean;
end;

procedure TGazeta._SetFiljtr_po_personalu(const NewValue: Boolean);
begin
  M_Filjtr_po_personalu.AsBoolean := NewValue;
end;

function TGazeta._Get_M_Iskatj_v_arhivnyh: TBABoolean;
begin
  assert(ValidateMember('TGazeta', 'Iskatj_v_arhivnyh', 14, TBABoolean));
  Result := TBABoolean(BoldMembers[14]);
end;

function TGazeta._GetIskatj_v_arhivnyh: Boolean;
begin
  Result := M_Iskatj_v_arhivnyh.AsBoolean;
end;

procedure TGazeta._SetIskatj_v_arhivnyh(const NewValue: Boolean);
begin
  M_Iskatj_v_arhivnyh.AsBoolean := NewValue;
end;

function TGazeta._Get_M_Tek_vypusk_nomer: TBAInteger;
begin
  assert(ValidateMember('TGazeta', 'Tek_vypusk_nomer', 15, TBAInteger));
  Result := TBAInteger(BoldMembers[15]);
end;

function TGazeta._GetTek_vypusk_nomer: Integer;
begin
  Result := M_Tek_vypusk_nomer.AsInteger;
end;

function TGazeta._Get_M_Tek_vypusk_god: TBAInteger;
begin
  assert(ValidateMember('TGazeta', 'Tek_vypusk_god', 16, TBAInteger));
  Result := TBAInteger(BoldMembers[16]);
end;

function TGazeta._GetTek_vypusk_god: Integer;
begin
  Result := M_Tek_vypusk_god.AsInteger;
end;

function TGazeta._Get_M_Posl_vypusk_nomer: TBAInteger;
begin
  assert(ValidateMember('TGazeta', 'Posl_vypusk_nomer', 17, TBAInteger));
  Result := TBAInteger(BoldMembers[17]);
end;

function TGazeta._GetPosl_vypusk_nomer: Integer;
begin
  Result := M_Posl_vypusk_nomer.AsInteger;
end;

function TGazeta._Get_M_Posl_vypusk_god: TBAInteger;
begin
  assert(ValidateMember('TGazeta', 'Posl_vypusk_god', 18, TBAInteger));
  Result := TBAInteger(BoldMembers[18]);
end;

function TGazeta._GetPosl_vypusk_god: Integer;
begin
  Result := M_Posl_vypusk_god.AsInteger;
end;

function TGazeta._Get_M_Filjtr_po_dann_klienta: TBABoolean;
begin
  assert(ValidateMember('TGazeta', 'Filjtr_po_dann_klienta', 19, TBABoolean));
  Result := TBABoolean(BoldMembers[19]);
end;

function TGazeta._GetFiljtr_po_dann_klienta: Boolean;
begin
  Result := M_Filjtr_po_dann_klienta.AsBoolean;
end;

procedure TGazeta._SetFiljtr_po_dann_klienta(const NewValue: Boolean);
begin
  M_Filjtr_po_dann_klienta.AsBoolean := NewValue;
end;

function TGazeta._Get_M_Marker: TBAString;
begin
  assert(ValidateMember('TGazeta', 'Marker', 20, TBAString));
  Result := TBAString(BoldMembers[20]);
end;

function TGazeta._GetMarker: String;
begin
  Result := M_Marker.AsString;
end;

procedure TGazeta._SetMarker(const NewValue: String);
begin
  M_Marker.AsString := NewValue;
end;

function TGazeta._Get_M_ProbelovDoMarkera: TBAInteger;
begin
  assert(ValidateMember('TGazeta', 'ProbelovDoMarkera', 21, TBAInteger));
  Result := TBAInteger(BoldMembers[21]);
end;

function TGazeta._GetProbelovDoMarkera: Integer;
begin
  Result := M_ProbelovDoMarkera.AsInteger;
end;

procedure TGazeta._SetProbelovDoMarkera(const NewValue: Integer);
begin
  M_ProbelovDoMarkera.AsInteger := NewValue;
end;

function TGazeta._Get_M_Probelov_PosleMarkera: TBAInteger;
begin
  assert(ValidateMember('TGazeta', 'Probelov_PosleMarkera', 22, TBAInteger));
  Result := TBAInteger(BoldMembers[22]);
end;

function TGazeta._GetProbelov_PosleMarkera: Integer;
begin
  Result := M_Probelov_PosleMarkera.AsInteger;
end;

procedure TGazeta._SetProbelov_PosleMarkera(const NewValue: Integer);
begin
  M_Probelov_PosleMarkera.AsInteger := NewValue;
end;

function TGazeta._Get_M_Shirina_ramki: TBAFloat;
begin
  assert(ValidateMember('TGazeta', 'Shirina_ramki', 23, TBAFloat));
  Result := TBAFloat(BoldMembers[23]);
end;

function TGazeta._GetShirina_ramki: double;
begin
  Result := M_Shirina_ramki.AsFloat;
end;

procedure TGazeta._SetShirina_ramki(const NewValue: double);
begin
  M_Shirina_ramki.AsFloat := NewValue;
end;

function TGazeta._Get_M_Dlina_ramki: TBAFloat;
begin
  assert(ValidateMember('TGazeta', 'Dlina_ramki', 24, TBAFloat));
  Result := TBAFloat(BoldMembers[24]);
end;

function TGazeta._GetDlina_ramki: double;
begin
  Result := M_Dlina_ramki.AsFloat;
end;

procedure TGazeta._SetDlina_ramki(const NewValue: double);
begin
  M_Dlina_ramki.AsFloat := NewValue;
end;

function TGazeta._Get_M_OtstupSverhu: TBAFloat;
begin
  assert(ValidateMember('TGazeta', 'OtstupSverhu', 25, TBAFloat));
  Result := TBAFloat(BoldMembers[25]);
end;

function TGazeta._GetOtstupSverhu: double;
begin
  Result := M_OtstupSverhu.AsFloat;
end;

procedure TGazeta._SetOtstupSverhu(const NewValue: double);
begin
  M_OtstupSverhu.AsFloat := NewValue;
end;

function TGazeta._Get_M_OtstupSnizu: TBAFloat;
begin
  assert(ValidateMember('TGazeta', 'OtstupSnizu', 26, TBAFloat));
  Result := TBAFloat(BoldMembers[26]);
end;

function TGazeta._GetOtstupSnizu: double;
begin
  Result := M_OtstupSnizu.AsFloat;
end;

procedure TGazeta._SetOtstupSnizu(const NewValue: double);
begin
  M_OtstupSnizu.AsFloat := NewValue;
end;

function TGazeta._Get_M_OtstupSprava: TBAFloat;
begin
  assert(ValidateMember('TGazeta', 'OtstupSprava', 27, TBAFloat));
  Result := TBAFloat(BoldMembers[27]);
end;

function TGazeta._GetOtstupSprava: double;
begin
  Result := M_OtstupSprava.AsFloat;
end;

procedure TGazeta._SetOtstupSprava(const NewValue: double);
begin
  M_OtstupSprava.AsFloat := NewValue;
end;

function TGazeta._Get_M_OtstupSleva: TBAFloat;
begin
  assert(ValidateMember('TGazeta', 'OtstupSleva', 28, TBAFloat));
  Result := TBAFloat(BoldMembers[28]);
end;

function TGazeta._GetOtstupSleva: double;
begin
  Result := M_OtstupSleva.AsFloat;
end;

procedure TGazeta._SetOtstupSleva(const NewValue: double);
begin
  M_OtstupSleva.AsFloat := NewValue;
end;

function TGazeta._Get_M_Tolshina: TBAFloat;
begin
  assert(ValidateMember('TGazeta', 'Tolshina', 29, TBAFloat));
  Result := TBAFloat(BoldMembers[29]);
end;

function TGazeta._GetTolshina: double;
begin
  Result := M_Tolshina.AsFloat;
end;

procedure TGazeta._SetTolshina(const NewValue: double);
begin
  M_Tolshina.AsFloat := NewValue;
end;

function TGazeta._Get_M_Pokaz_objyavl_v_der: TBABoolean;
begin
  assert(ValidateMember('TGazeta', 'Pokaz_objyavl_v_der', 30, TBABoolean));
  Result := TBABoolean(BoldMembers[30]);
end;

function TGazeta._GetPokaz_objyavl_v_der: Boolean;
begin
  Result := M_Pokaz_objyavl_v_der.AsBoolean;
end;

procedure TGazeta._SetPokaz_objyavl_v_der(const NewValue: Boolean);
begin
  M_Pokaz_objyavl_v_der.AsBoolean := NewValue;
end;

function TGazeta._Get_M_Sortirovatj_po_ubyvaniyu: TBABoolean;
begin
  assert(ValidateMember('TGazeta', 'Sortirovatj_po_ubyvaniyu', 31, TBABoolean));
  Result := TBABoolean(BoldMembers[31]);
end;

function TGazeta._GetSortirovatj_po_ubyvaniyu: Boolean;
begin
  Result := M_Sortirovatj_po_ubyvaniyu.AsBoolean;
end;

procedure TGazeta._SetSortirovatj_po_ubyvaniyu(const NewValue: Boolean);
begin
  M_Sortirovatj_po_ubyvaniyu.AsBoolean := NewValue;
end;

function TGazeta._Get_M_Ukazatj__periodichnostj: TBABoolean;
begin
  assert(ValidateMember('TGazeta', 'Ukazatj__periodichnostj', 32, TBABoolean));
  Result := TBABoolean(BoldMembers[32]);
end;

function TGazeta._GetUkazatj__periodichnostj: Boolean;
begin
  Result := M_Ukazatj__periodichnostj.AsBoolean;
end;

procedure TGazeta._SetUkazatj__periodichnostj(const NewValue: Boolean);
begin
  M_Ukazatj__periodichnostj.AsBoolean := NewValue;
end;

function TGazeta._Get_M_Chislo_vyh_v_tek_godu: TBAInteger;
begin
  assert(ValidateMember('TGazeta', 'Chislo_vyh_v_tek_godu', 33, TBAInteger));
  Result := TBAInteger(BoldMembers[33]);
end;

function TGazeta._GetChislo_vyh_v_tek_godu: Integer;
begin
  Result := M_Chislo_vyh_v_tek_godu.AsInteger;
end;

function TGazeta._Get_M_Period_vyh_v_dnyah: TBAInteger;
begin
  assert(ValidateMember('TGazeta', 'Period_vyh_v_dnyah', 34, TBAInteger));
  Result := TBAInteger(BoldMembers[34]);
end;

function TGazeta._GetPeriod_vyh_v_dnyah: Integer;
begin
  Result := M_Period_vyh_v_dnyah.AsInteger;
end;

procedure TGazeta._SetPeriod_vyh_v_dnyah(const NewValue: Integer);
begin
  M_Period_vyh_v_dnyah.AsInteger := NewValue;
end;

function TGazeta._Get_M_Denj_ned_vyhoda: TBAString;
begin
  assert(ValidateMember('TGazeta', 'Denj_ned_vyhoda', 35, TBAString));
  Result := TBAString(BoldMembers[35]);
end;

function TGazeta._GetDenj_ned_vyhoda: String;
begin
  Result := M_Denj_ned_vyhoda.AsString;
end;

procedure TGazeta._SetDenj_ned_vyhoda(const NewValue: String);
begin
  M_Denj_ned_vyhoda.AsString := NewValue;
end;

function TGazeta._Get_M_Vyp_spisok_vypuskov: TBABoolean;
begin
  assert(ValidateMember('TGazeta', 'Vyp_spisok_vypuskov', 36, TBABoolean));
  Result := TBABoolean(BoldMembers[36]);
end;

function TGazeta._GetVyp_spisok_vypuskov: Boolean;
begin
  Result := M_Vyp_spisok_vypuskov.AsBoolean;
end;

procedure TGazeta._SetVyp_spisok_vypuskov(const NewValue: Boolean);
begin
  M_Vyp_spisok_vypuskov.AsBoolean := NewValue;
end;

function TGazeta._Get_M_Ispoljz_pervye_nesk_simv: TBABoolean;
begin
  assert(ValidateMember('TGazeta', 'Ispoljz_pervye_nesk_simv', 37, TBABoolean));
  Result := TBABoolean(BoldMembers[37]);
end;

function TGazeta._GetIspoljz_pervye_nesk_simv: Boolean;
begin
  Result := M_Ispoljz_pervye_nesk_simv.AsBoolean;
end;

procedure TGazeta._SetIspoljz_pervye_nesk_simv(const NewValue: Boolean);
begin
  M_Ispoljz_pervye_nesk_simv.AsBoolean := NewValue;
end;

function TGazeta._Get_M_Ukaz_zakon_form_slova: TBABoolean;
begin
  assert(ValidateMember('TGazeta', 'Ukaz_zakon_form_slova', 38, TBABoolean));
  Result := TBABoolean(BoldMembers[38]);
end;

function TGazeta._GetUkaz_zakon_form_slova: Boolean;
begin
  Result := M_Ukaz_zakon_form_slova.AsBoolean;
end;

procedure TGazeta._SetUkaz_zakon_form_slova(const NewValue: Boolean);
begin
  M_Ukaz_zakon_form_slova.AsBoolean := NewValue;
end;

function TGazeta._Get_M_Kolichestvo_simvolov: TBAInteger;
begin
  assert(ValidateMember('TGazeta', 'Kolichestvo_simvolov', 39, TBAInteger));
  Result := TBAInteger(BoldMembers[39]);
end;

function TGazeta._GetKolichestvo_simvolov: Integer;
begin
  Result := M_Kolichestvo_simvolov.AsInteger;
end;

procedure TGazeta._SetKolichestvo_simvolov(const NewValue: Integer);
begin
  M_Kolichestvo_simvolov.AsInteger := NewValue;
end;

function TGazeta._Get_M_Zakon_form_slova: TBAString;
begin
  assert(ValidateMember('TGazeta', 'Zakon_form_slova', 40, TBAString));
  Result := TBAString(BoldMembers[40]);
end;

function TGazeta._GetZakon_form_slova: String;
begin
  Result := M_Zakon_form_slova.AsString;
end;

procedure TGazeta._SetZakon_form_slova(const NewValue: String);
begin
  M_Zakon_form_slova.AsString := NewValue;
end;

function TGazeta._Get_M_Nomera_vyh_grupp: TBAString;
begin
  assert(ValidateMember('TGazeta', 'Nomera_vyh_grupp', 41, TBAString));
  Result := TBAString(BoldMembers[41]);
end;

function TGazeta._GetNomera_vyh_grupp: String;
begin
  Result := M_Nomera_vyh_grupp.AsString;
end;

procedure TGazeta._SetNomera_vyh_grupp(const NewValue: String);
begin
  M_Nomera_vyh_grupp.AsString := NewValue;
end;

function TGazeta._Get_M_Chislo_v_srochn_grupp: TBAInteger;
begin
  assert(ValidateMember('TGazeta', 'Chislo_v_srochn_grupp', 42, TBAInteger));
  Result := TBAInteger(BoldMembers[42]);
end;

function TGazeta._GetChislo_v_srochn_grupp: Integer;
begin
  Result := M_Chislo_v_srochn_grupp.AsInteger;
end;

procedure TGazeta._SetChislo_v_srochn_grupp(const NewValue: Integer);
begin
  M_Chislo_v_srochn_grupp.AsInteger := NewValue;
end;

function TGazeta._Get_M_Sprash_dlya_kagdogo: TBABoolean;
begin
  assert(ValidateMember('TGazeta', 'Sprash_dlya_kagdogo', 43, TBABoolean));
  Result := TBABoolean(BoldMembers[43]);
end;

function TGazeta._GetSprash_dlya_kagdogo: Boolean;
begin
  Result := M_Sprash_dlya_kagdogo.AsBoolean;
end;

procedure TGazeta._SetSprash_dlya_kagdogo(const NewValue: Boolean);
begin
  M_Sprash_dlya_kagdogo.AsBoolean := NewValue;
end;

function TGazeta._Get_M_Vstavl_mnogotochie: TBABoolean;
begin
  assert(ValidateMember('TGazeta', 'Vstavl_mnogotochie', 44, TBABoolean));
  Result := TBABoolean(BoldMembers[44]);
end;

function TGazeta._GetVstavl_mnogotochie: Boolean;
begin
  Result := M_Vstavl_mnogotochie.AsBoolean;
end;

procedure TGazeta._SetVstavl_mnogotochie(const NewValue: Boolean);
begin
  M_Vstavl_mnogotochie.AsBoolean := NewValue;
end;

function TGazeta._Get_M_Isk_nom_v_primech_Word: TBABoolean;
begin
  assert(ValidateMember('TGazeta', 'Isk_nom_v_primech_Word', 45, TBABoolean));
  Result := TBABoolean(BoldMembers[45]);
end;

function TGazeta._GetIsk_nom_v_primech_Word: Boolean;
begin
  Result := M_Isk_nom_v_primech_Word.AsBoolean;
end;

procedure TGazeta._SetIsk_nom_v_primech_Word(const NewValue: Boolean);
begin
  M_Isk_nom_v_primech_Word.AsBoolean := NewValue;
end;

function TGazeta._Get_M_Vstavl_toljk_tekst_Word: TBABoolean;
begin
  assert(ValidateMember('TGazeta', 'Vstavl_toljk_tekst_Word', 46, TBABoolean));
  Result := TBABoolean(BoldMembers[46]);
end;

function TGazeta._GetVstavl_toljk_tekst_Word: Boolean;
begin
  Result := M_Vstavl_toljk_tekst_Word.AsBoolean;
end;

procedure TGazeta._SetVstavl_toljk_tekst_Word(const NewValue: Boolean);
begin
  M_Vstavl_toljk_tekst_Word.AsBoolean := NewValue;
end;

function TGazeta._Get_M_Ustan_prizn_nach_Word: TBABoolean;
begin
  assert(ValidateMember('TGazeta', 'Ustan_prizn_nach_Word', 47, TBABoolean));
  Result := TBABoolean(BoldMembers[47]);
end;

function TGazeta._GetUstan_prizn_nach_Word: Boolean;
begin
  Result := M_Ustan_prizn_nach_Word.AsBoolean;
end;

procedure TGazeta._SetUstan_prizn_nach_Word(const NewValue: Boolean);
begin
  M_Ustan_prizn_nach_Word.AsBoolean := NewValue;
end;

function TGazeta._Get_M_Annonce_marker_Word: TBAString;
begin
  assert(ValidateMember('TGazeta', 'Annonce_marker_Word', 48, TBAString));
  Result := TBAString(BoldMembers[48]);
end;

function TGazeta._GetAnnonce_marker_Word: String;
begin
  Result := M_Annonce_marker_Word.AsString;
end;

procedure TGazeta._SetAnnonce_marker_Word(const NewValue: String);
begin
  M_Annonce_marker_Word.AsString := NewValue;
end;

function TGazeta._Get_M_Request_at_no_params_Word: TBABoolean;
begin
  assert(ValidateMember('TGazeta', 'Request_at_no_params_Word', 49, TBABoolean));
  Result := TBABoolean(BoldMembers[49]);
end;

function TGazeta._GetRequest_at_no_params_Word: Boolean;
begin
  Result := M_Request_at_no_params_Word.AsBoolean;
end;

procedure TGazeta._SetRequest_at_no_params_Word(const NewValue: Boolean);
begin
  M_Request_at_no_params_Word.AsBoolean := NewValue;
end;

function TGazeta._Get_M_Def_group_curr_curr: TBABoolean;
begin
  assert(ValidateMember('TGazeta', 'Def_group_curr_curr', 50, TBABoolean));
  Result := TBABoolean(BoldMembers[50]);
end;

function TGazeta._GetDef_group_curr_curr: Boolean;
begin
  Result := M_Def_group_curr_curr.AsBoolean;
end;

procedure TGazeta._SetDef_group_curr_curr(const NewValue: Boolean);
begin
  M_Def_group_curr_curr.AsBoolean := NewValue;
end;

function TGazeta._Get_M_Def_group_curr_unlimit: TBABoolean;
begin
  assert(ValidateMember('TGazeta', 'Def_group_curr_unlimit', 51, TBABoolean));
  Result := TBABoolean(BoldMembers[51]);
end;

function TGazeta._GetDef_group_curr_unlimit: Boolean;
begin
  Result := M_Def_group_curr_unlimit.AsBoolean;
end;

procedure TGazeta._SetDef_group_curr_unlimit(const NewValue: Boolean);
begin
  M_Def_group_curr_unlimit.AsBoolean := NewValue;
end;

function TGazeta._Get_M_Pokaz_prikr_srochn_v_der: TBABoolean;
begin
  assert(ValidateMember('TGazeta', 'Pokaz_prikr_srochn_v_der', 52, TBABoolean));
  Result := TBABoolean(BoldMembers[52]);
end;

function TGazeta._GetPokaz_prikr_srochn_v_der: Boolean;
begin
  Result := M_Pokaz_prikr_srochn_v_der.AsBoolean;
end;

procedure TGazeta._SetPokaz_prikr_srochn_v_der(const NewValue: Boolean);
begin
  M_Pokaz_prikr_srochn_v_der.AsBoolean := NewValue;
end;

function TGazeta._Get_M_Chislo_objyavlenii: TBAInteger;
begin
  assert(ValidateMember('TGazeta', 'Chislo_objyavlenii', 53, TBAInteger));
  Result := TBAInteger(BoldMembers[53]);
end;

function TGazeta._GetChislo_objyavlenii: Integer;
begin
  Result := M_Chislo_objyavlenii.AsInteger;
end;

function TGazeta._Get_M_Chislo_nekorrektn: TBAInteger;
begin
  assert(ValidateMember('TGazeta', 'Chislo_nekorrektn', 54, TBAInteger));
  Result := TBAInteger(BoldMembers[54]);
end;

function TGazeta._GetChislo_nekorrektn: Integer;
begin
  Result := M_Chislo_nekorrektn.AsInteger;
end;

function TGazeta._Get_M_Kolich_nom_chistki: TBAInteger;
begin
  assert(ValidateMember('TGazeta', 'Kolich_nom_chistki', 55, TBAInteger));
  Result := TBAInteger(BoldMembers[55]);
end;

function TGazeta._GetKolich_nom_chistki: Integer;
begin
  Result := M_Kolich_nom_chistki.AsInteger;
end;

procedure TGazeta._SetKolich_nom_chistki(const NewValue: Integer);
begin
  M_Kolich_nom_chistki.AsInteger := NewValue;
end;

function TGazeta._Get_M_Ident_vyd_razd: TBAFloat;
begin
  assert(ValidateMember('TGazeta', 'Ident_vyd_razd', 56, TBAFloat));
  Result := TBAFloat(BoldMembers[56]);
end;

function TGazeta._GetIdent_vyd_razd: double;
begin
  Result := M_Ident_vyd_razd.AsFloat;
end;

procedure TGazeta._SetIdent_vyd_razd(const NewValue: double);
begin
  M_Ident_vyd_razd.AsFloat := NewValue;
end;

function TGazeta._Get_M_Pokaz_cveta_klientov: TBABoolean;
begin
  assert(ValidateMember('TGazeta', 'Pokaz_cveta_klientov', 57, TBABoolean));
  Result := TBABoolean(BoldMembers[57]);
end;

function TGazeta._GetPokaz_cveta_klientov: Boolean;
begin
  Result := M_Pokaz_cveta_klientov.AsBoolean;
end;

procedure TGazeta._SetPokaz_cveta_klientov(const NewValue: Boolean);
begin
  M_Pokaz_cveta_klientov.AsBoolean := NewValue;
end;

function TGazeta._Getvklyuchaet_vypusk: TVypuskList;
begin
  assert(ValidateMember('TGazeta', 'vklyuchaet_vypusk', 58, TVypuskList));
  Result := TVypuskList(BoldMembers[58]);
end;

function TGazeta._Get_M_osush_poisk_po_klassu: TBoldObjectReference;
begin
  assert(ValidateMember('TGazeta', 'osush_poisk_po_klassu', 59, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[59]);
end;

function TGazeta._Getosush_poisk_po_klassu: TKlass_poiska;
begin
  assert(not assigned(M_osush_poisk_po_klassu.BoldObject) or (M_osush_poisk_po_klassu.BoldObject is TKlass_poiska), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'osush_poisk_po_klassu', M_osush_poisk_po_klassu.BoldObject.ClassName, 'TKlass_poiska']));
  Result := TKlass_poiska(M_osush_poisk_po_klassu.BoldObject);
end;

procedure TGazeta._Setosush_poisk_po_klassu(const value: TKlass_poiska);
begin
  M_osush_poisk_po_klassu.BoldObject := value;
end;

procedure TGazetaList.Add(NewObject: TGazeta);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TGazetaList.IndexOf(anObject: TGazeta): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TGazetaList.Includes(anObject: TGazeta) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TGazetaList.AddNew: TGazeta;
begin
  result := TGazeta(InternalAddNew);
end;

procedure TGazetaList.Insert(index: Integer; NewObject: TGazeta);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TGazetaList.GetBoldObject(index: Integer): TGazeta;
begin
  result := TGazeta(GetElement(index));
end;

procedure TGazetaList.SetBoldObject(index: Integer; NewObject: TGazeta);
begin;
  SetElement(index, NewObject);
end;

{ TGruppa_vypuskov }

function TGruppa_vypuskov._Getvhodit_v_gruppu_vyp: TVypuskList;
begin
  assert(ValidateMember('TGruppa_vypuskov', 'vhodit_v_gruppu_vyp', 3, TVypuskList));
  Result := TVypuskList(BoldMembers[3]);
end;

procedure TGruppa_vypuskovList.Add(NewObject: TGruppa_vypuskov);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TGruppa_vypuskovList.IndexOf(anObject: TGruppa_vypuskov): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TGruppa_vypuskovList.Includes(anObject: TGruppa_vypuskov) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TGruppa_vypuskovList.AddNew: TGruppa_vypuskov;
begin
  result := TGruppa_vypuskov(InternalAddNew);
end;

procedure TGruppa_vypuskovList.Insert(index: Integer; NewObject: TGruppa_vypuskov);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TGruppa_vypuskovList.GetBoldObject(index: Integer): TGruppa_vypuskov;
begin
  result := TGruppa_vypuskov(GetElement(index));
end;

procedure TGruppa_vypuskovList.SetBoldObject(index: Integer; NewObject: TGruppa_vypuskov);
begin;
  SetElement(index, NewObject);
end;

{ TKlyuchi_vklyuch__objyavlenii }

function TKlyuchi_vklyuch__objyavlenii._Get_M_Odin_iz_klyuchei_dlya_spiska: TBoldObjectReference;
begin
  assert(ValidateMember('TKlyuchi_vklyuch__objyavlenii', 'Odin_iz_klyuchei_dlya_spiska', 3, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[3]);
end;

function TKlyuchi_vklyuch__objyavlenii._GetOdin_iz_klyuchei_dlya_spiska: TRazdel;
begin
  assert(not assigned(M_Odin_iz_klyuchei_dlya_spiska.BoldObject) or (M_Odin_iz_klyuchei_dlya_spiska.BoldObject is TRazdel), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Odin_iz_klyuchei_dlya_spiska', M_Odin_iz_klyuchei_dlya_spiska.BoldObject.ClassName, 'TRazdel']));
  Result := TRazdel(M_Odin_iz_klyuchei_dlya_spiska.BoldObject);
end;

procedure TKlyuchi_vklyuch__objyavlenii._SetOdin_iz_klyuchei_dlya_spiska(const value: TRazdel);
begin
  M_Odin_iz_klyuchei_dlya_spiska.BoldObject := value;
end;

function TKlyuchi_vklyuch__objyavlenii._Get_M_vhodit_v_spravochnik: TBoldObjectReference;
begin
  assert(ValidateMember('TKlyuchi_vklyuch__objyavlenii', 'vhodit_v_spravochnik', 4, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[4]);
end;

function TKlyuchi_vklyuch__objyavlenii._Getvhodit_v_spravochnik: TRazdel_spravochnika;
begin
  assert(not assigned(M_vhodit_v_spravochnik.BoldObject) or (M_vhodit_v_spravochnik.BoldObject is TRazdel_spravochnika), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'vhodit_v_spravochnik', M_vhodit_v_spravochnik.BoldObject.ClassName, 'TRazdel_spravochnika']));
  Result := TRazdel_spravochnika(M_vhodit_v_spravochnik.BoldObject);
end;

procedure TKlyuchi_vklyuch__objyavlenii._Setvhodit_v_spravochnik(const value: TRazdel_spravochnika);
begin
  M_vhodit_v_spravochnik.BoldObject := value;
end;

procedure TKlyuchi_vklyuch__objyavleniiList.Add(NewObject: TKlyuchi_vklyuch__objyavlenii);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TKlyuchi_vklyuch__objyavleniiList.IndexOf(anObject: TKlyuchi_vklyuch__objyavlenii): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TKlyuchi_vklyuch__objyavleniiList.Includes(anObject: TKlyuchi_vklyuch__objyavlenii) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TKlyuchi_vklyuch__objyavleniiList.AddNew: TKlyuchi_vklyuch__objyavlenii;
begin
  result := TKlyuchi_vklyuch__objyavlenii(InternalAddNew);
end;

procedure TKlyuchi_vklyuch__objyavleniiList.Insert(index: Integer; NewObject: TKlyuchi_vklyuch__objyavlenii);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TKlyuchi_vklyuch__objyavleniiList.GetBoldObject(index: Integer): TKlyuchi_vklyuch__objyavlenii;
begin
  result := TKlyuchi_vklyuch__objyavlenii(GetElement(index));
end;

procedure TKlyuchi_vklyuch__objyavleniiList.SetBoldObject(index: Integer; NewObject: TKlyuchi_vklyuch__objyavlenii);
begin;
  SetElement(index, NewObject);
end;

{ TKupon }

function TKupon._Get_M_Kod_formy: TBAInteger;
begin
  assert(ValidateMember('TKupon', 'Kod_formy', 3, TBAInteger));
  Result := TBAInteger(BoldMembers[3]);
end;

function TKupon._GetKod_formy: Integer;
begin
  Result := M_Kod_formy.AsInteger;
end;

procedure TKupon._SetKod_formy(const NewValue: Integer);
begin
  M_Kod_formy.AsInteger := NewValue;
end;

function TKupon._Get_M_PriznProdayu: TBABoolean;
begin
  assert(ValidateMember('TKupon', 'PriznProdayu', 4, TBABoolean));
  Result := TBABoolean(BoldMembers[4]);
end;

function TKupon._GetPriznProdayu: Boolean;
begin
  Result := M_PriznProdayu.AsBoolean;
end;

procedure TKupon._SetPriznProdayu(const NewValue: Boolean);
begin
  M_PriznProdayu.AsBoolean := NewValue;
end;

function TKupon._Get_M_PrizeKuplyu: TBABoolean;
begin
  assert(ValidateMember('TKupon', 'PrizeKuplyu', 5, TBABoolean));
  Result := TBABoolean(BoldMembers[5]);
end;

function TKupon._GetPrizeKuplyu: Boolean;
begin
  Result := M_PrizeKuplyu.AsBoolean;
end;

procedure TKupon._SetPrizeKuplyu(const NewValue: Boolean);
begin
  M_PrizeKuplyu.AsBoolean := NewValue;
end;

function TKupon._Get_M_PriznMenyayu: TBABoolean;
begin
  assert(ValidateMember('TKupon', 'PriznMenyayu', 6, TBABoolean));
  Result := TBABoolean(BoldMembers[6]);
end;

function TKupon._GetPriznMenyayu: Boolean;
begin
  Result := M_PriznMenyayu.AsBoolean;
end;

procedure TKupon._SetPriznMenyayu(const NewValue: Boolean);
begin
  M_PriznMenyayu.AsBoolean := NewValue;
end;

function TKupon._Get_M_PriznSdayu: TBABoolean;
begin
  assert(ValidateMember('TKupon', 'PriznSdayu', 7, TBABoolean));
  Result := TBABoolean(BoldMembers[7]);
end;

function TKupon._GetPriznSdayu: Boolean;
begin
  Result := M_PriznSdayu.AsBoolean;
end;

procedure TKupon._SetPriznSdayu(const NewValue: Boolean);
begin
  M_PriznSdayu.AsBoolean := NewValue;
end;

function TKupon._Get_M_PriznSnimu: TBABoolean;
begin
  assert(ValidateMember('TKupon', 'PriznSnimu', 8, TBABoolean));
  Result := TBABoolean(BoldMembers[8]);
end;

function TKupon._GetPriznSnimu: Boolean;
begin
  Result := M_PriznSnimu.AsBoolean;
end;

procedure TKupon._SetPriznSnimu(const NewValue: Boolean);
begin
  M_PriznSnimu.AsBoolean := NewValue;
end;

function TKupon._Get_M_PriznVypolnyu: TBABoolean;
begin
  assert(ValidateMember('TKupon', 'PriznVypolnyu', 9, TBABoolean));
  Result := TBABoolean(BoldMembers[9]);
end;

function TKupon._GetPriznVypolnyu: Boolean;
begin
  Result := M_PriznVypolnyu.AsBoolean;
end;

procedure TKupon._SetPriznVypolnyu(const NewValue: Boolean);
begin
  M_PriznVypolnyu.AsBoolean := NewValue;
end;

function TKupon._Get_M_PriznSoglasen: TBABoolean;
begin
  assert(ValidateMember('TKupon', 'PriznSoglasen', 10, TBABoolean));
  Result := TBABoolean(BoldMembers[10]);
end;

function TKupon._GetPriznSoglasen: Boolean;
begin
  Result := M_PriznSoglasen.AsBoolean;
end;

procedure TKupon._SetPriznSoglasen(const NewValue: Boolean);
begin
  M_PriznSoglasen.AsBoolean := NewValue;
end;

function TKupon._Get_M_Nom_perv_stand_prizn: TBAInteger;
begin
  assert(ValidateMember('TKupon', 'Nom_perv_stand_prizn', 11, TBAInteger));
  Result := TBAInteger(BoldMembers[11]);
end;

function TKupon._GetNom_perv_stand_prizn: Integer;
begin
  Result := M_Nom_perv_stand_prizn.AsInteger;
end;

function TKupon._Getisp_dlya_dob_v_razdel: TRazdelList;
begin
  assert(ValidateMember('TKupon', 'isp_dlya_dob_v_razdel', 12, TRazdelList));
  Result := TRazdelList(BoldMembers[12]);
end;

function TKupon._Getispoljz_prizn_dobavleniya: TPriznak_razdelaList;
begin
  assert(ValidateMember('TKupon', 'ispoljz_prizn_dobavleniya', 13, TPriznak_razdelaList));
  Result := TPriznak_razdelaList(BoldMembers[13]);
end;

function TKupon._GetLinksostavlyaet_harakterispoljz_prizn_dobavleniya: TLinksostavlyaet_harakterispoljz_prizn_dobavleniyaList;
begin
  assert(ValidateMember('TKupon', 'Linksostavlyaet_harakterispoljz_prizn_dobavleniya', 14, TLinksostavlyaet_harakterispoljz_prizn_dobavleniyaList));
  Result := TLinksostavlyaet_harakterispoljz_prizn_dobavleniyaList(BoldMembers[14]);
end;

procedure TKuponList.Add(NewObject: TKupon);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TKuponList.IndexOf(anObject: TKupon): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TKuponList.Includes(anObject: TKupon) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TKuponList.AddNew: TKupon;
begin
  result := TKupon(InternalAddNew);
end;

procedure TKuponList.Insert(index: Integer; NewObject: TKupon);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TKuponList.GetBoldObject(index: Integer): TKupon;
begin
  result := TKupon(GetElement(index));
end;

procedure TKuponList.SetBoldObject(index: Integer; NewObject: TKupon);
begin;
  SetElement(index, NewObject);
end;

{ TPriznak_razdela }

function TPriznak_razdela._Get_M_Kod_priznaka: TBAInteger;
begin
  assert(ValidateMember('TPriznak_razdela', 'Kod_priznaka', 3, TBAInteger));
  Result := TBAInteger(BoldMembers[3]);
end;

function TPriznak_razdela._GetKod_priznaka: Integer;
begin
  Result := M_Kod_priznaka.AsInteger;
end;

procedure TPriznak_razdela._SetKod_priznaka(const NewValue: Integer);
begin
  M_Kod_priznaka.AsInteger := NewValue;
end;

function TPriznak_razdela._Getyavl_priznakom_dlya: TRazdelList;
begin
  assert(ValidateMember('TPriznak_razdela', 'yavl_priznakom_dlya', 4, TRazdelList));
  Result := TRazdelList(BoldMembers[4]);
end;

function TPriznak_razdela._Getsostavlyaet_harakter: TKuponList;
begin
  assert(ValidateMember('TPriznak_razdela', 'sostavlyaet_harakter', 5, TKuponList));
  Result := TKuponList(BoldMembers[5]);
end;

function TPriznak_razdela._GetLinksostavlyaet_harakterispoljz_prizn_dobavleniya: TLinksostavlyaet_harakterispoljz_prizn_dobavleniyaList;
begin
  assert(ValidateMember('TPriznak_razdela', 'Linksostavlyaet_harakterispoljz_prizn_dobavleniya', 6, TLinksostavlyaet_harakterispoljz_prizn_dobavleniyaList));
  Result := TLinksostavlyaet_harakterispoljz_prizn_dobavleniyaList(BoldMembers[6]);
end;

procedure TPriznak_razdelaList.Add(NewObject: TPriznak_razdela);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TPriznak_razdelaList.IndexOf(anObject: TPriznak_razdela): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TPriznak_razdelaList.Includes(anObject: TPriznak_razdela) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TPriznak_razdelaList.AddNew: TPriznak_razdela;
begin
  result := TPriznak_razdela(InternalAddNew);
end;

procedure TPriznak_razdelaList.Insert(index: Integer; NewObject: TPriznak_razdela);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TPriznak_razdelaList.GetBoldObject(index: Integer): TPriznak_razdela;
begin
  result := TPriznak_razdela(GetElement(index));
end;

procedure TPriznak_razdelaList.SetBoldObject(index: Integer; NewObject: TPriznak_razdela);
begin;
  SetElement(index, NewObject);
end;

{ TRazdel_spravochnika }

function TRazdel_spravochnika._Getsodergit_perechenj_klyuchei: TKlyuchi_vklyuch__objyavleniiList;
begin
  assert(ValidateMember('TRazdel_spravochnika', 'sodergit_perechenj_klyuchei', 3, TKlyuchi_vklyuch__objyavleniiList));
  Result := TKlyuchi_vklyuch__objyavleniiList(BoldMembers[3]);
end;

procedure TRazdel_spravochnikaList.Add(NewObject: TRazdel_spravochnika);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TRazdel_spravochnikaList.IndexOf(anObject: TRazdel_spravochnika): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TRazdel_spravochnikaList.Includes(anObject: TRazdel_spravochnika) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TRazdel_spravochnikaList.AddNew: TRazdel_spravochnika;
begin
  result := TRazdel_spravochnika(InternalAddNew);
end;

procedure TRazdel_spravochnikaList.Insert(index: Integer; NewObject: TRazdel_spravochnika);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TRazdel_spravochnikaList.GetBoldObject(index: Integer): TRazdel_spravochnika;
begin
  result := TRazdel_spravochnika(GetElement(index));
end;

procedure TRazdel_spravochnikaList.SetBoldObject(index: Integer; NewObject: TRazdel_spravochnika);
begin;
  SetElement(index, NewObject);
end;

{ TTip_vypuska }

procedure TTip_vypuskaList.Add(NewObject: TTip_vypuska);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TTip_vypuskaList.IndexOf(anObject: TTip_vypuska): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TTip_vypuskaList.Includes(anObject: TTip_vypuska) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TTip_vypuskaList.AddNew: TTip_vypuska;
begin
  result := TTip_vypuska(InternalAddNew);
end;

procedure TTip_vypuskaList.Insert(index: Integer; NewObject: TTip_vypuska);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TTip_vypuskaList.GetBoldObject(index: Integer): TTip_vypuska;
begin
  result := TTip_vypuska(GetElement(index));
end;

procedure TTip_vypuskaList.SetBoldObject(index: Integer; NewObject: TTip_vypuska);
begin;
  SetElement(index, NewObject);
end;

{ TTip_razdelitelya }

function TTip_razdelitelya._Get_M_Razdelitelj: TBAInteger;
begin
  assert(ValidateMember('TTip_razdelitelya', 'Razdelitelj', 3, TBAInteger));
  Result := TBAInteger(BoldMembers[3]);
end;

function TTip_razdelitelya._GetRazdelitelj: Integer;
begin
  Result := M_Razdelitelj.AsInteger;
end;

procedure TTip_razdelitelya._SetRazdelitelj(const NewValue: Integer);
begin
  M_Razdelitelj.AsInteger := NewValue;
end;

function TTip_razdelitelya._Get_M_Risunok: TBABlob;
begin
  assert(ValidateMember('TTip_razdelitelya', 'Risunok', 4, TBABlob));
  Result := TBABlob(BoldMembers[4]);
end;

function TTip_razdelitelya._GetRisunok: String;
begin
  Result := M_Risunok.AsString;
end;

procedure TTip_razdelitelya._SetRisunok(const NewValue: String);
begin
  M_Risunok.AsString := NewValue;
end;

function TTip_razdelitelya._GetOpis_razdelenie_v: TShablon_razdelaList;
begin
  assert(ValidateMember('TTip_razdelitelya', 'Opis_razdelenie_v', 5, TShablon_razdelaList));
  Result := TShablon_razdelaList(BoldMembers[5]);
end;

procedure TTip_razdelitelyaList.Add(NewObject: TTip_razdelitelya);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TTip_razdelitelyaList.IndexOf(anObject: TTip_razdelitelya): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TTip_razdelitelyaList.Includes(anObject: TTip_razdelitelya) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TTip_razdelitelyaList.AddNew: TTip_razdelitelya;
begin
  result := TTip_razdelitelya(InternalAddNew);
end;

procedure TTip_razdelitelyaList.Insert(index: Integer; NewObject: TTip_razdelitelya);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TTip_razdelitelyaList.GetBoldObject(index: Integer): TTip_razdelitelya;
begin
  result := TTip_razdelitelya(GetElement(index));
end;

procedure TTip_razdelitelyaList.SetBoldObject(index: Integer; NewObject: TTip_razdelitelya);
begin;
  SetElement(index, NewObject);
end;

{ TTip_ramki }

function TTip_ramki._Get_M_Identifikator_WORD: TBAInteger;
begin
  assert(ValidateMember('TTip_ramki', 'Identifikator_WORD', 3, TBAInteger));
  Result := TBAInteger(BoldMembers[3]);
end;

function TTip_ramki._GetIdentifikator_WORD: Integer;
begin
  Result := M_Identifikator_WORD.AsInteger;
end;

procedure TTip_ramki._SetIdentifikator_WORD(const NewValue: Integer);
begin
  M_Identifikator_WORD.AsInteger := NewValue;
end;

function TTip_ramki._Getimeet_tip_ramki: TShablon_objyavleniyaList;
begin
  assert(ValidateMember('TTip_ramki', 'imeet_tip_ramki', 4, TShablon_objyavleniyaList));
  Result := TShablon_objyavleniyaList(BoldMembers[4]);
end;

procedure TTip_ramkiList.Add(NewObject: TTip_ramki);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TTip_ramkiList.IndexOf(anObject: TTip_ramki): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TTip_ramkiList.Includes(anObject: TTip_ramki) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TTip_ramkiList.AddNew: TTip_ramki;
begin
  result := TTip_ramki(InternalAddNew);
end;

procedure TTip_ramkiList.Insert(index: Integer; NewObject: TTip_ramki);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TTip_ramkiList.GetBoldObject(index: Integer): TTip_ramki;
begin
  result := TTip_ramki(GetElement(index));
end;

procedure TTip_ramkiList.SetBoldObject(index: Integer; NewObject: TTip_ramki);
begin;
  SetElement(index, NewObject);
end;

{ TTip_fona }

function TTip_fona._Getimeet_tip_fona: TShablon_objyavleniyaList;
begin
  assert(ValidateMember('TTip_fona', 'imeet_tip_fona', 3, TShablon_objyavleniyaList));
  Result := TShablon_objyavleniyaList(BoldMembers[3]);
end;

procedure TTip_fonaList.Add(NewObject: TTip_fona);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TTip_fonaList.IndexOf(anObject: TTip_fona): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TTip_fonaList.Includes(anObject: TTip_fona) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TTip_fonaList.AddNew: TTip_fona;
begin
  result := TTip_fona(InternalAddNew);
end;

procedure TTip_fonaList.Insert(index: Integer; NewObject: TTip_fona);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TTip_fonaList.GetBoldObject(index: Integer): TTip_fona;
begin
  result := TTip_fona(GetElement(index));
end;

procedure TTip_fonaList.SetBoldObject(index: Integer; NewObject: TTip_fona);
begin;
  SetElement(index, NewObject);
end;

{ TTolshina_linii }

function TTolshina_linii._Get_M_Tolshina: TBAFloat;
begin
  assert(ValidateMember('TTolshina_linii', 'Tolshina', 3, TBAFloat));
  Result := TBAFloat(BoldMembers[3]);
end;

function TTolshina_linii._GetTolshina: double;
begin
  Result := M_Tolshina.AsFloat;
end;

procedure TTolshina_linii._SetTolshina(const NewValue: double);
begin
  M_Tolshina.AsFloat := NewValue;
end;

function TTolshina_linii._Getimeet_tolsh_ramki: TShablon_objyavleniyaList;
begin
  assert(ValidateMember('TTolshina_linii', 'imeet_tolsh_ramki', 4, TShablon_objyavleniyaList));
  Result := TShablon_objyavleniyaList(BoldMembers[4]);
end;

procedure TTolshina_liniiList.Add(NewObject: TTolshina_linii);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TTolshina_liniiList.IndexOf(anObject: TTolshina_linii): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TTolshina_liniiList.Includes(anObject: TTolshina_linii) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TTolshina_liniiList.AddNew: TTolshina_linii;
begin
  result := TTolshina_linii(InternalAddNew);
end;

procedure TTolshina_liniiList.Insert(index: Integer; NewObject: TTolshina_linii);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TTolshina_liniiList.GetBoldObject(index: Integer): TTolshina_linii;
begin
  result := TTolshina_linii(GetElement(index));
end;

procedure TTolshina_liniiList.SetBoldObject(index: Integer; NewObject: TTolshina_linii);
begin;
  SetElement(index, NewObject);
end;

{ TObjyavlenie }

function TObjyavlenie._Get_M_WordBlob: TBATypedBlob;
begin
  assert(ValidateMember('TObjyavlenie', 'WordBlob', 16, TBATypedBlob));
  Result := TBATypedBlob(BoldMembers[16]);
end;

function TObjyavlenie._GetWordBlob: String;
begin
  Result := M_WordBlob.AsString;
end;

procedure TObjyavlenie._SetWordBlob(const NewValue: String);
begin
  M_WordBlob.AsString := NewValue;
end;

function TObjyavlenie._Get_M_Data_dobavleniya: TBADate;
begin
  assert(ValidateMember('TObjyavlenie', 'Data_dobavleniya', 17, TBADate));
  Result := TBADate(BoldMembers[17]);
end;

function TObjyavlenie._GetData_dobavleniya: TDate;
begin
  Result := M_Data_dobavleniya.AsDate;
end;

procedure TObjyavlenie._SetData_dobavleniya(const NewValue: TDate);
begin
  M_Data_dobavleniya.AsDate := NewValue;
end;

function TObjyavlenie._Get_M_Data_modifikacii: TBADate;
begin
  assert(ValidateMember('TObjyavlenie', 'Data_modifikacii', 18, TBADate));
  Result := TBADate(BoldMembers[18]);
end;

function TObjyavlenie._GetData_modifikacii: TDate;
begin
  Result := M_Data_modifikacii.AsDate;
end;

procedure TObjyavlenie._SetData_modifikacii(const NewValue: TDate);
begin
  M_Data_modifikacii.AsDate := NewValue;
end;

function TObjyavlenie._Get_M_Cvetovoe_oboznachenie: TBAString;
begin
  assert(ValidateMember('TObjyavlenie', 'Cvetovoe_oboznachenie', 19, TBAString));
  Result := TBAString(BoldMembers[19]);
end;

function TObjyavlenie._GetCvetovoe_oboznachenie: String;
begin
  Result := M_Cvetovoe_oboznachenie.AsString;
end;

procedure TObjyavlenie._SetCvetovoe_oboznachenie(const NewValue: String);
begin
  M_Cvetovoe_oboznachenie.AsString := NewValue;
end;

function TObjyavlenie._Get_M_YavlArhivnym: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'YavlArhivnym', 20, TBABoolean));
  Result := TBABoolean(BoldMembers[20]);
end;

function TObjyavlenie._GetYavlArhivnym: Boolean;
begin
  Result := M_YavlArhivnym.AsBoolean;
end;

function TObjyavlenie._Get_M_Otkorrektirovan: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'Otkorrektirovan', 21, TBABoolean));
  Result := TBABoolean(BoldMembers[21]);
end;

function TObjyavlenie._GetOtkorrektirovan: Boolean;
begin
  Result := M_Otkorrektirovan.AsBoolean;
end;

procedure TObjyavlenie._SetOtkorrektirovan(const NewValue: Boolean);
begin
  M_Otkorrektirovan.AsBoolean := NewValue;
end;

function TObjyavlenie._Get_M_VyhVPechTekushii: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'VyhVPechTekushii', 22, TBABoolean));
  Result := TBABoolean(BoldMembers[22]);
end;

function TObjyavlenie._GetVyhVPechTekushii: Boolean;
begin
  Result := M_VyhVPechTekushii.AsBoolean;
end;

function TObjyavlenie._Get_M_Klyuch_slovo: TBAString;
begin
  assert(ValidateMember('TObjyavlenie', 'Klyuch_slovo', 23, TBAString));
  Result := TBAString(BoldMembers[23]);
end;

function TObjyavlenie._GetKlyuch_slovo: String;
begin
  Result := M_Klyuch_slovo.AsString;
end;

procedure TObjyavlenie._SetKlyuch_slovo(const NewValue: String);
begin
  M_Klyuch_slovo.AsString := NewValue;
end;

function TObjyavlenie._Get_M_Sortirovatj_po_tekstu: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'Sortirovatj_po_tekstu', 24, TBABoolean));
  Result := TBABoolean(BoldMembers[24]);
end;

function TObjyavlenie._GetSortirovatj_po_tekstu: Boolean;
begin
  Result := M_Sortirovatj_po_tekstu.AsBoolean;
end;

procedure TObjyavlenie._SetSortirovatj_po_tekstu(const NewValue: Boolean);
begin
  M_Sortirovatj_po_tekstu.AsBoolean := NewValue;
end;

function TObjyavlenie._Get_M_Cvet_stroki: TBAInteger;
begin
  assert(ValidateMember('TObjyavlenie', 'Cvet_stroki', 25, TBAInteger));
  Result := TBAInteger(BoldMembers[25]);
end;

function TObjyavlenie._GetCvet_stroki: Integer;
begin
  Result := M_Cvet_stroki.AsInteger;
end;

procedure TObjyavlenie._SetCvet_stroki(const NewValue: Integer);
begin
  M_Cvet_stroki.AsInteger := NewValue;
end;

function TObjyavlenie._Get_M_Klient_yavl_organiz: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'Klient_yavl_organiz', 26, TBABoolean));
  Result := TBABoolean(BoldMembers[26]);
end;

function TObjyavlenie._GetKlient_yavl_organiz: Boolean;
begin
  Result := M_Klient_yavl_organiz.AsBoolean;
end;

procedure TObjyavlenie._SetKlient_yavl_organiz(const NewValue: Boolean);
begin
  M_Klient_yavl_organiz.AsBoolean := NewValue;
end;

function TObjyavlenie._Get_M_Chislo_vyp_posle_vklyuch: TBAInteger;
begin
  assert(ValidateMember('TObjyavlenie', 'Chislo_vyp_posle_vklyuch', 27, TBAInteger));
  Result := TBAInteger(BoldMembers[27]);
end;

function TObjyavlenie._GetChislo_vyp_posle_vklyuch: Integer;
begin
  Result := M_Chislo_vyp_posle_vklyuch.AsInteger;
end;

function TObjyavlenie._Get_M_Identifikator_objyavleniya: TBAFloat;
begin
  assert(ValidateMember('TObjyavlenie', 'Identifikator_objyavleniya', 28, TBAFloat));
  Result := TBAFloat(BoldMembers[28]);
end;

function TObjyavlenie._GetIdentifikator_objyavleniya: double;
begin
  Result := M_Identifikator_objyavleniya.AsFloat;
end;

procedure TObjyavlenie._SetIdentifikator_objyavleniya(const NewValue: double);
begin
  M_Identifikator_objyavleniya.AsFloat := NewValue;
end;

function TObjyavlenie._Get_M_Data_vypuska_perv_vyhoda: TBADate;
begin
  assert(ValidateMember('TObjyavlenie', 'Data_vypuska_perv_vyhoda', 29, TBADate));
  Result := TBADate(BoldMembers[29]);
end;

function TObjyavlenie._GetData_vypuska_perv_vyhoda: TDate;
begin
  Result := M_Data_vypuska_perv_vyhoda.AsDate;
end;

function TObjyavlenie._Get_M_VyhVPechEshyo: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'VyhVPechEshyo', 30, TBABoolean));
  Result := TBABoolean(BoldMembers[30]);
end;

function TObjyavlenie._GetVyhVPechEshyo: Boolean;
begin
  Result := M_VyhVPechEshyo.AsBoolean;
end;

function TObjyavlenie._Get_M_Data_tek_vyp: TBADate;
begin
  assert(ValidateMember('TObjyavlenie', 'Data_tek_vyp', 31, TBADate));
  Result := TBADate(BoldMembers[31]);
end;

function TObjyavlenie._GetData_tek_vyp: TDate;
begin
  Result := M_Data_tek_vyp.AsDate;
end;

function TObjyavlenie._Get_M_Data_posl_vyp: TBADate;
begin
  assert(ValidateMember('TObjyavlenie', 'Data_posl_vyp', 32, TBADate));
  Result := TBADate(BoldMembers[32]);
end;

function TObjyavlenie._GetData_posl_vyp: TDate;
begin
  Result := M_Data_posl_vyp.AsDate;
end;

function TObjyavlenie._Get_M_Ident_posl_vyp: TBAFloat;
begin
  assert(ValidateMember('TObjyavlenie', 'Ident_posl_vyp', 33, TBAFloat));
  Result := TBAFloat(BoldMembers[33]);
end;

function TObjyavlenie._GetIdent_posl_vyp: double;
begin
  Result := M_Ident_posl_vyp.AsFloat;
end;

function TObjyavlenie._Get_M_Ident_tek_vyp: TBAFloat;
begin
  assert(ValidateMember('TObjyavlenie', 'Ident_tek_vyp', 34, TBAFloat));
  Result := TBAFloat(BoldMembers[34]);
end;

function TObjyavlenie._GetIdent_tek_vyp: double;
begin
  Result := M_Ident_tek_vyp.AsFloat;
end;

function TObjyavlenie._Get_M_Identifikator_gaz: TBAInteger;
begin
  assert(ValidateMember('TObjyavlenie', 'Identifikator_gaz', 35, TBAInteger));
  Result := TBAInteger(BoldMembers[35]);
end;

function TObjyavlenie._GetIdentifikator_gaz: Integer;
begin
  Result := M_Identifikator_gaz.AsInteger;
end;

function TObjyavlenie._Get_M_Identifikator_razdela: TBAFloat;
begin
  assert(ValidateMember('TObjyavlenie', 'Identifikator_razdela', 36, TBAFloat));
  Result := TBAFloat(BoldMembers[36]);
end;

function TObjyavlenie._GetIdentifikator_razdela: double;
begin
  Result := M_Identifikator_razdela.AsFloat;
end;

function TObjyavlenie._Get_M_Tekst_objyavleniya: TBAString;
begin
  assert(ValidateMember('TObjyavlenie', 'Tekst_objyavleniya', 37, TBAString));
  Result := TBAString(BoldMembers[37]);
end;

function TObjyavlenie._GetTekst_objyavleniya: String;
begin
  Result := M_Tekst_objyavleniya.AsString;
end;

procedure TObjyavlenie._SetTekst_objyavleniya(const NewValue: String);
begin
  M_Tekst_objyavleniya.AsString := NewValue;
end;

function TObjyavlenie._Get_M_Vhodit_v_kak_lib_razdel: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'Vhodit_v_kak_lib_razdel', 38, TBABoolean));
  Result := TBABoolean(BoldMembers[38]);
end;

function TObjyavlenie._GetVhodit_v_kak_lib_razdel: Boolean;
begin
  Result := M_Vhodit_v_kak_lib_razdel.AsBoolean;
end;

function TObjyavlenie._Get_M_Tek_vypusk_nomer: TBAInteger;
begin
  assert(ValidateMember('TObjyavlenie', 'Tek_vypusk_nomer', 39, TBAInteger));
  Result := TBAInteger(BoldMembers[39]);
end;

function TObjyavlenie._GetTek_vypusk_nomer: Integer;
begin
  Result := M_Tek_vypusk_nomer.AsInteger;
end;

function TObjyavlenie._Get_M_Tek_vypusk_god: TBAInteger;
begin
  assert(ValidateMember('TObjyavlenie', 'Tek_vypusk_god', 40, TBAInteger));
  Result := TBAInteger(BoldMembers[40]);
end;

function TObjyavlenie._GetTek_vypusk_god: Integer;
begin
  Result := M_Tek_vypusk_god.AsInteger;
end;

function TObjyavlenie._Get_M_Posl_vypusk_nomer: TBAInteger;
begin
  assert(ValidateMember('TObjyavlenie', 'Posl_vypusk_nomer', 41, TBAInteger));
  Result := TBAInteger(BoldMembers[41]);
end;

function TObjyavlenie._GetPosl_vypusk_nomer: Integer;
begin
  Result := M_Posl_vypusk_nomer.AsInteger;
end;

function TObjyavlenie._Get_M_Posl_vypusk_god: TBAInteger;
begin
  assert(ValidateMember('TObjyavlenie', 'Posl_vypusk_god', 42, TBAInteger));
  Result := TBAInteger(BoldMembers[42]);
end;

function TObjyavlenie._GetPosl_vypusk_god: Integer;
begin
  Result := M_Posl_vypusk_god.AsInteger;
end;

function TObjyavlenie._Get_M_Ukazatj_nomera: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'Ukazatj_nomera', 43, TBABoolean));
  Result := TBABoolean(BoldMembers[43]);
end;

function TObjyavlenie._GetUkazatj_nomera: Boolean;
begin
  Result := M_Ukazatj_nomera.AsBoolean;
end;

procedure TObjyavlenie._SetUkazatj_nomera(const NewValue: Boolean);
begin
  M_Ukazatj_nomera.AsBoolean := NewValue;
end;

function TObjyavlenie._Get_M_Vyh_po_ukaz_nomeram_v_tek: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'Vyh_po_ukaz_nomeram_v_tek', 44, TBABoolean));
  Result := TBABoolean(BoldMembers[44]);
end;

function TObjyavlenie._GetVyh_po_ukaz_nomeram_v_tek: Boolean;
begin
  Result := M_Vyh_po_ukaz_nomeram_v_tek.AsBoolean;
end;

function TObjyavlenie._Get_M_Vydel_girn_klyuch: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'Vydel_girn_klyuch', 45, TBABoolean));
  Result := TBABoolean(BoldMembers[45]);
end;

function TObjyavlenie._GetVydel_girn_klyuch: Boolean;
begin
  Result := M_Vydel_girn_klyuch.AsBoolean;
end;

procedure TObjyavlenie._SetVydel_girn_klyuch(const NewValue: Boolean);
begin
  M_Vydel_girn_klyuch.AsBoolean := NewValue;
end;

function TObjyavlenie._Get_M_Podskazka_o_vyhode_po_nomeram: TBAString;
begin
  assert(ValidateMember('TObjyavlenie', 'Podskazka_o_vyhode_po_nomeram', 46, TBAString));
  Result := TBAString(BoldMembers[46]);
end;

function TObjyavlenie._GetPodskazka_o_vyhode_po_nomeram: String;
begin
  Result := M_Podskazka_o_vyhode_po_nomeram.AsString;
end;

function TObjyavlenie._Get_M_Koncovka: TBAString;
begin
  assert(ValidateMember('TObjyavlenie', 'Koncovka', 47, TBAString));
  Result := TBAString(BoldMembers[47]);
end;

function TObjyavlenie._GetKoncovka: String;
begin
  Result := M_Koncovka.AsString;
end;

function TObjyavlenie._Get_M_Kolichestvo_v_srochnom: TBAInteger;
begin
  assert(ValidateMember('TObjyavlenie', 'Kolichestvo_v_srochnom', 48, TBAInteger));
  Result := TBAInteger(BoldMembers[48]);
end;

function TObjyavlenie._GetKolichestvo_v_srochnom: Integer;
begin
  Result := M_Kolichestvo_v_srochnom.AsInteger;
end;

procedure TObjyavlenie._SetKolichestvo_v_srochnom(const NewValue: Integer);
begin
  M_Kolichestvo_v_srochnom.AsInteger := NewValue;
end;

function TObjyavlenie._Get_M_Nach_nomer: TBAInteger;
begin
  assert(ValidateMember('TObjyavlenie', 'Nach_nomer', 49, TBAInteger));
  Result := TBAInteger(BoldMembers[49]);
end;

function TObjyavlenie._GetNach_nomer: Integer;
begin
  Result := M_Nach_nomer.AsInteger;
end;

procedure TObjyavlenie._SetNach_nomer(const NewValue: Integer);
begin
  M_Nach_nomer.AsInteger := NewValue;
end;

function TObjyavlenie._Get_M_Konechn_nomer: TBAInteger;
begin
  assert(ValidateMember('TObjyavlenie', 'Konechn_nomer', 50, TBAInteger));
  Result := TBAInteger(BoldMembers[50]);
end;

function TObjyavlenie._GetKonechn_nomer: Integer;
begin
  Result := M_Konechn_nomer.AsInteger;
end;

procedure TObjyavlenie._SetKonechn_nomer(const NewValue: Integer);
begin
  M_Konechn_nomer.AsInteger := NewValue;
end;

function TObjyavlenie._Get_M_Nach_god: TBAInteger;
begin
  assert(ValidateMember('TObjyavlenie', 'Nach_god', 51, TBAInteger));
  Result := TBAInteger(BoldMembers[51]);
end;

function TObjyavlenie._GetNach_god: Integer;
begin
  Result := M_Nach_god.AsInteger;
end;

procedure TObjyavlenie._SetNach_god(const NewValue: Integer);
begin
  M_Nach_god.AsInteger := NewValue;
end;

function TObjyavlenie._Get_M_Konechn_god: TBAInteger;
begin
  assert(ValidateMember('TObjyavlenie', 'Konechn_god', 52, TBAInteger));
  Result := TBAInteger(BoldMembers[52]);
end;

function TObjyavlenie._GetKonechn_god: Integer;
begin
  Result := M_Konechn_god.AsInteger;
end;

procedure TObjyavlenie._SetKonechn_god(const NewValue: Integer);
begin
  M_Konechn_god.AsInteger := NewValue;
end;

function TObjyavlenie._Get_M_Vyh_po_ukaz_nomeram_v_posl: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'Vyh_po_ukaz_nomeram_v_posl', 53, TBABoolean));
  Result := TBABoolean(BoldMembers[53]);
end;

function TObjyavlenie._GetVyh_po_ukaz_nomeram_v_posl: Boolean;
begin
  Result := M_Vyh_po_ukaz_nomeram_v_posl.AsBoolean;
end;

function TObjyavlenie._Get_M_Vyh_po_ukaz_nomeram_eshyo: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'Vyh_po_ukaz_nomeram_eshyo', 54, TBABoolean));
  Result := TBABoolean(BoldMembers[54]);
end;

function TObjyavlenie._GetVyh_po_ukaz_nomeram_eshyo: Boolean;
begin
  Result := M_Vyh_po_ukaz_nomeram_eshyo.AsBoolean;
end;

function TObjyavlenie._Get_M_Podskazka_o_vyhode_polnaya: TBAString;
begin
  assert(ValidateMember('TObjyavlenie', 'Podskazka_o_vyhode_polnaya', 55, TBAString));
  Result := TBAString(BoldMembers[55]);
end;

function TObjyavlenie._GetPodskazka_o_vyhode_polnaya: String;
begin
  Result := M_Podskazka_o_vyhode_polnaya.AsString;
end;

function TObjyavlenie._Get_M_Adres: TBAString;
begin
  assert(ValidateMember('TObjyavlenie', 'Adres', 56, TBAString));
  Result := TBAString(BoldMembers[56]);
end;

function TObjyavlenie._GetAdres: String;
begin
  Result := M_Adres.AsString;
end;

function TObjyavlenie._Get_M_Telefony: TBAString;
begin
  assert(ValidateMember('TObjyavlenie', 'Telefony', 57, TBAString));
  Result := TBAString(BoldMembers[57]);
end;

function TObjyavlenie._GetTelefony: String;
begin
  Result := M_Telefony.AsString;
end;

function TObjyavlenie._Get_M_Vyh_po_otd_nomer_tek: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'Vyh_po_otd_nomer_tek', 58, TBABoolean));
  Result := TBABoolean(BoldMembers[58]);
end;

function TObjyavlenie._GetVyh_po_otd_nomer_tek: Boolean;
begin
  Result := M_Vyh_po_otd_nomer_tek.AsBoolean;
end;

function TObjyavlenie._Get_M_Ukaz_otd_nomera: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'Ukaz_otd_nomera', 59, TBABoolean));
  Result := TBABoolean(BoldMembers[59]);
end;

function TObjyavlenie._GetUkaz_otd_nomera: Boolean;
begin
  Result := M_Ukaz_otd_nomera.AsBoolean;
end;

procedure TObjyavlenie._SetUkaz_otd_nomera(const NewValue: Boolean);
begin
  M_Ukaz_otd_nomera.AsBoolean := NewValue;
end;

function TObjyavlenie._Get_M_Vyh_po_otd_nomer_eshyo: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'Vyh_po_otd_nomer_eshyo', 60, TBABoolean));
  Result := TBABoolean(BoldMembers[60]);
end;

function TObjyavlenie._GetVyh_po_otd_nomer_eshyo: Boolean;
begin
  Result := M_Vyh_po_otd_nomer_eshyo.AsBoolean;
end;

function TObjyavlenie._Get_M_Chislo_vyh_po_ukaz_nomeram: TBAInteger;
begin
  assert(ValidateMember('TObjyavlenie', 'Chislo_vyh_po_ukaz_nomeram', 61, TBAInteger));
  Result := TBAInteger(BoldMembers[61]);
end;

function TObjyavlenie._GetChislo_vyh_po_ukaz_nomeram: Integer;
begin
  Result := M_Chislo_vyh_po_ukaz_nomeram.AsInteger;
end;

function TObjyavlenie._Get_M_Nomer_pervogo_vypuska: TBAInteger;
begin
  assert(ValidateMember('TObjyavlenie', 'Nomer_pervogo_vypuska', 62, TBAInteger));
  Result := TBAInteger(BoldMembers[62]);
end;

function TObjyavlenie._GetNomer_pervogo_vypuska: Integer;
begin
  Result := M_Nomer_pervogo_vypuska.AsInteger;
end;

function TObjyavlenie._Get_M_God_pervogo_vypuska: TBAInteger;
begin
  assert(ValidateMember('TObjyavlenie', 'God_pervogo_vypuska', 63, TBAInteger));
  Result := TBAInteger(BoldMembers[63]);
end;

function TObjyavlenie._GetGod_pervogo_vypuska: Integer;
begin
  Result := M_God_pervogo_vypuska.AsInteger;
end;

function TObjyavlenie._Get_M_VyhVPechPosl: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'VyhVPechPosl', 64, TBABoolean));
  Result := TBABoolean(BoldMembers[64]);
end;

function TObjyavlenie._GetVyhVPechPosl: Boolean;
begin
  Result := M_VyhVPechPosl.AsBoolean;
end;

function TObjyavlenie._Get_M_TekVypDoBlig: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'TekVypDoBlig', 65, TBABoolean));
  Result := TBABoolean(BoldMembers[65]);
end;

function TObjyavlenie._GetTekVypDoBlig: Boolean;
begin
  Result := M_TekVypDoBlig.AsBoolean;
end;

function TObjyavlenie._Get_M_Vyh_po_otdeljn_nomeram_posl: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'Vyh_po_otdeljn_nomeram_posl', 66, TBABoolean));
  Result := TBABoolean(BoldMembers[66]);
end;

function TObjyavlenie._GetVyh_po_otdeljn_nomeram_posl: Boolean;
begin
  Result := M_Vyh_po_otdeljn_nomeram_posl.AsBoolean;
end;

function TObjyavlenie._Get_M_Obnovl_tekst_soderg: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'Obnovl_tekst_soderg', 67, TBABoolean));
  Result := TBABoolean(BoldMembers[67]);
end;

function TObjyavlenie._GetObnovl_tekst_soderg: Boolean;
begin
  Result := M_Obnovl_tekst_soderg.AsBoolean;
end;

procedure TObjyavlenie._SetObnovl_tekst_soderg(const NewValue: Boolean);
begin
  M_Obnovl_tekst_soderg.AsBoolean := NewValue;
end;

function TObjyavlenie._Get_M_Istoriya_smeny_periodov: TBAString;
begin
  assert(ValidateMember('TObjyavlenie', 'Istoriya_smeny_periodov', 68, TBAString));
  Result := TBAString(BoldMembers[68]);
end;

function TObjyavlenie._GetIstoriya_smeny_periodov: String;
begin
  Result := M_Istoriya_smeny_periodov.AsString;
end;

procedure TObjyavlenie._SetIstoriya_smeny_periodov(const NewValue: String);
begin
  M_Istoriya_smeny_periodov.AsString := NewValue;
end;

function TObjyavlenie._Get_M_Otmenyaemyi_nomer: TBAInteger;
begin
  assert(ValidateMember('TObjyavlenie', 'Otmenyaemyi_nomer', 69, TBAInteger));
  Result := TBAInteger(BoldMembers[69]);
end;

function TObjyavlenie._GetOtmenyaemyi_nomer: Integer;
begin
  Result := M_Otmenyaemyi_nomer.AsInteger;
end;

procedure TObjyavlenie._SetOtmenyaemyi_nomer(const NewValue: Integer);
begin
  M_Otmenyaemyi_nomer.AsInteger := NewValue;
end;

function TObjyavlenie._Get_M_Kolichestvo_otd_nom_vyhoda: TBAInteger;
begin
  assert(ValidateMember('TObjyavlenie', 'Kolichestvo_otd_nom_vyhoda', 70, TBAInteger));
  Result := TBAInteger(BoldMembers[70]);
end;

function TObjyavlenie._GetKolichestvo_otd_nom_vyhoda: Integer;
begin
  Result := M_Kolichestvo_otd_nom_vyhoda.AsInteger;
end;

function TObjyavlenie._Get_M_Kol_nom_vyh_v_intervale: TBAInteger;
begin
  assert(ValidateMember('TObjyavlenie', 'Kol_nom_vyh_v_intervale', 71, TBAInteger));
  Result := TBAInteger(BoldMembers[71]);
end;

function TObjyavlenie._GetKol_nom_vyh_v_intervale: Integer;
begin
  Result := M_Kol_nom_vyh_v_intervale.AsInteger;
end;

function TObjyavlenie._Get_M_Vsego_nom_vyhoda: TBAInteger;
begin
  assert(ValidateMember('TObjyavlenie', 'Vsego_nom_vyhoda', 72, TBAInteger));
  Result := TBAInteger(BoldMembers[72]);
end;

function TObjyavlenie._GetVsego_nom_vyhoda: Integer;
begin
  Result := M_Vsego_nom_vyhoda.AsInteger;
end;

function TObjyavlenie._Get_M_Srochn_boljsh_chem_vyh: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'Srochn_boljsh_chem_vyh', 73, TBABoolean));
  Result := TBABoolean(BoldMembers[73]);
end;

function TObjyavlenie._GetSrochn_boljsh_chem_vyh: Boolean;
begin
  Result := M_Srochn_boljsh_chem_vyh.AsBoolean;
end;

function TObjyavlenie._Get_M_Konechn_vyh_beskon: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'Konechn_vyh_beskon', 74, TBABoolean));
  Result := TBABoolean(BoldMembers[74]);
end;

function TObjyavlenie._GetKonechn_vyh_beskon: Boolean;
begin
  Result := M_Konechn_vyh_beskon.AsBoolean;
end;

procedure TObjyavlenie._SetKonechn_vyh_beskon(const NewValue: Boolean);
begin
  M_Konechn_vyh_beskon.AsBoolean := NewValue;
end;

function TObjyavlenie._Get_M_Vyhodit_iz_srochn_v_tekushem: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'Vyhodit_iz_srochn_v_tekushem', 75, TBABoolean));
  Result := TBABoolean(BoldMembers[75]);
end;

function TObjyavlenie._GetVyhodit_iz_srochn_v_tekushem: Boolean;
begin
  Result := M_Vyhodit_iz_srochn_v_tekushem.AsBoolean;
end;

function TObjyavlenie._Get_M_Min_god_v_otd: TBAInteger;
begin
  assert(ValidateMember('TObjyavlenie', 'Min_god_v_otd', 76, TBAInteger));
  Result := TBAInteger(BoldMembers[76]);
end;

function TObjyavlenie._GetMin_god_v_otd: Integer;
begin
  Result := M_Min_god_v_otd.AsInteger;
end;

function TObjyavlenie._Get_M_Min_nom_v_otd: TBAInteger;
begin
  assert(ValidateMember('TObjyavlenie', 'Min_nom_v_otd', 77, TBAInteger));
  Result := TBAInteger(BoldMembers[77]);
end;

function TObjyavlenie._GetMin_nom_v_otd: Integer;
begin
  Result := M_Min_nom_v_otd.AsInteger;
end;

function TObjyavlenie._Get_M_Shapka_srochn_razdela: TBAString;
begin
  assert(ValidateMember('TObjyavlenie', 'Shapka_srochn_razdela', 78, TBAString));
  Result := TBAString(BoldMembers[78]);
end;

function TObjyavlenie._GetShapka_srochn_razdela: String;
begin
  Result := M_Shapka_srochn_razdela.AsString;
end;

function TObjyavlenie._Get_M_Vyh_v_srochn_v_tek_vyp: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'Vyh_v_srochn_v_tek_vyp', 79, TBABoolean));
  Result := TBABoolean(BoldMembers[79]);
end;

function TObjyavlenie._GetVyh_v_srochn_v_tek_vyp: Boolean;
begin
  Result := M_Vyh_v_srochn_v_tek_vyp.AsBoolean;
end;

function TObjyavlenie._Get_M_Primechanie: TBAString;
begin
  assert(ValidateMember('TObjyavlenie', 'Primechanie', 80, TBAString));
  Result := TBAString(BoldMembers[80]);
end;

function TObjyavlenie._GetPrimechanie: String;
begin
  Result := M_Primechanie.AsString;
end;

procedure TObjyavlenie._SetPrimechanie(const NewValue: String);
begin
  M_Primechanie.AsString := NewValue;
end;

function TObjyavlenie._Get_M_VBaze: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'VBaze', 81, TBABoolean));
  Result := TBABoolean(BoldMembers[81]);
end;

function TObjyavlenie._GetVBaze: Boolean;
begin
  Result := M_VBaze.AsBoolean;
end;

procedure TObjyavlenie._SetVBaze(const NewValue: Boolean);
begin
  M_VBaze.AsBoolean := NewValue;
end;

function TObjyavlenie._Get_M_Slovo_sortirovki: TBAString;
begin
  assert(ValidateMember('TObjyavlenie', 'Slovo_sortirovki', 82, TBAString));
  Result := TBAString(BoldMembers[82]);
end;

function TObjyavlenie._GetSlovo_sortirovki: String;
begin
  Result := M_Slovo_sortirovki.AsString;
end;

function TObjyavlenie._Get_M_Vyh_po_ukaz_nom_tek_eshyo: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'Vyh_po_ukaz_nom_tek_eshyo', 83, TBABoolean));
  Result := TBABoolean(BoldMembers[83]);
end;

function TObjyavlenie._GetVyh_po_ukaz_nom_tek_eshyo: Boolean;
begin
  Result := M_Vyh_po_ukaz_nom_tek_eshyo.AsBoolean;
end;

function TObjyavlenie._Get_M_Vyhod_po_otd_nom_tek_eshyo: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'Vyhod_po_otd_nom_tek_eshyo', 84, TBABoolean));
  Result := TBABoolean(BoldMembers[84]);
end;

function TObjyavlenie._GetVyhod_po_otd_nom_tek_eshyo: Boolean;
begin
  Result := M_Vyhod_po_otd_nom_tek_eshyo.AsBoolean;
end;

function TObjyavlenie._Get_M_Vyh_v_pech_tek_eshyo: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'Vyh_v_pech_tek_eshyo', 85, TBABoolean));
  Result := TBABoolean(BoldMembers[85]);
end;

function TObjyavlenie._GetVyh_v_pech_tek_eshyo: Boolean;
begin
  Result := M_Vyh_v_pech_tek_eshyo.AsBoolean;
end;

function TObjyavlenie._Get_M_Vhod_v_vydelennyi: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'Vhod_v_vydelennyi', 86, TBABoolean));
  Result := TBABoolean(BoldMembers[86]);
end;

function TObjyavlenie._GetVhod_v_vydelennyi: Boolean;
begin
  Result := M_Vhod_v_vydelennyi.AsBoolean;
end;

function TObjyavlenie._Get_M_V_tege_girnosti: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'V_tege_girnosti', 87, TBABoolean));
  Result := TBABoolean(BoldMembers[87]);
end;

function TObjyavlenie._GetV_tege_girnosti: Boolean;
begin
  Result := M_V_tege_girnosti.AsBoolean;
end;

procedure TObjyavlenie._SetV_tege_girnosti(const NewValue: Boolean);
begin
  M_V_tege_girnosti.AsBoolean := NewValue;
end;

function TObjyavlenie._Get_M_Chislo_vyh_posle_vklyuch_srochn: TBAInteger;
begin
  assert(ValidateMember('TObjyavlenie', 'Chislo_vyh_posle_vklyuch_srochn', 88, TBAInteger));
  Result := TBAInteger(BoldMembers[88]);
end;

function TObjyavlenie._GetChislo_vyh_posle_vklyuch_srochn: Integer;
begin
  Result := M_Chislo_vyh_posle_vklyuch_srochn.AsInteger;
end;

function TObjyavlenie._Get_M_Chislo_vyh_posle_vklyuch_tekush: TBAInteger;
begin
  assert(ValidateMember('TObjyavlenie', 'Chislo_vyh_posle_vklyuch_tekush', 89, TBAInteger));
  Result := TBAInteger(BoldMembers[89]);
end;

function TObjyavlenie._GetChislo_vyh_posle_vklyuch_tekush: Integer;
begin
  Result := M_Chislo_vyh_posle_vklyuch_tekush.AsInteger;
end;

function TObjyavlenie._Get_M_Ispoljz_sobstv_teg: TBABoolean;
begin
  assert(ValidateMember('TObjyavlenie', 'Ispoljz_sobstv_teg', 90, TBABoolean));
  Result := TBABoolean(BoldMembers[90]);
end;

function TObjyavlenie._GetIspoljz_sobstv_teg: Boolean;
begin
  Result := M_Ispoljz_sobstv_teg.AsBoolean;
end;

procedure TObjyavlenie._SetIspoljz_sobstv_teg(const NewValue: Boolean);
begin
  M_Ispoljz_sobstv_teg.AsBoolean := NewValue;
end;

function TObjyavlenie._Get_M_Sobstv_teg: TBAString;
begin
  assert(ValidateMember('TObjyavlenie', 'Sobstv_teg', 91, TBAString));
  Result := TBAString(BoldMembers[91]);
end;

function TObjyavlenie._GetSobstv_teg: String;
begin
  Result := M_Sobstv_teg.AsString;
end;

procedure TObjyavlenie._SetSobstv_teg(const NewValue: String);
begin
  M_Sobstv_teg.AsString := NewValue;
end;

function TObjyavlenie._Get_M_Teg: TBAString;
begin
  assert(ValidateMember('TObjyavlenie', 'Teg', 92, TBAString));
  Result := TBAString(BoldMembers[92]);
end;

function TObjyavlenie._GetTeg: String;
begin
  Result := M_Teg.AsString;
end;

function TObjyavlenie._Get_M_vhodit_v_razdel: TBoldObjectReference;
begin
  assert(ValidateMember('TObjyavlenie', 'vhodit_v_razdel', 93, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[93]);
end;

function TObjyavlenie._Getvhodit_v_razdel: TRazdel;
begin
  assert(not assigned(M_vhodit_v_razdel.BoldObject) or (M_vhodit_v_razdel.BoldObject is TRazdel), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'vhodit_v_razdel', M_vhodit_v_razdel.BoldObject.ClassName, 'TRazdel']));
  Result := TRazdel(M_vhodit_v_razdel.BoldObject);
end;

procedure TObjyavlenie._Setvhodit_v_razdel(const value: TRazdel);
begin
  M_vhodit_v_razdel.BoldObject := value;
end;

function TObjyavlenie._Get_M_obrabatyvaetsya_sotrudnikom: TBoldObjectReference;
begin
  assert(ValidateMember('TObjyavlenie', 'obrabatyvaetsya_sotrudnikom', 94, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[94]);
end;

function TObjyavlenie._Getobrabatyvaetsya_sotrudnikom: TPersonal;
begin
  assert(not assigned(M_obrabatyvaetsya_sotrudnikom.BoldObject) or (M_obrabatyvaetsya_sotrudnikom.BoldObject is TPersonal), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'obrabatyvaetsya_sotrudnikom', M_obrabatyvaetsya_sotrudnikom.BoldObject.ClassName, 'TPersonal']));
  Result := TPersonal(M_obrabatyvaetsya_sotrudnikom.BoldObject);
end;

procedure TObjyavlenie._Setobrabatyvaetsya_sotrudnikom(const value: TPersonal);
begin
  M_obrabatyvaetsya_sotrudnikom.BoldObject := value;
end;

function TObjyavlenie._Get_M_otnositsya_k_klientu: TBoldObjectReference;
begin
  assert(ValidateMember('TObjyavlenie', 'otnositsya_k_klientu', 95, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[95]);
end;

function TObjyavlenie._Getotnositsya_k_klientu: TKlient;
begin
  assert(not assigned(M_otnositsya_k_klientu.BoldObject) or (M_otnositsya_k_klientu.BoldObject is TKlient), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'otnositsya_k_klientu', M_otnositsya_k_klientu.BoldObject.ClassName, 'TKlient']));
  Result := TKlient(M_otnositsya_k_klientu.BoldObject);
end;

procedure TObjyavlenie._Setotnositsya_k_klientu(const value: TKlient);
begin
  M_otnositsya_k_klientu.BoldObject := value;
end;

function TObjyavlenie._Getobyaz_vyhodit_v: TVyvoditj_v_datuList;
begin
  assert(ValidateMember('TObjyavlenie', 'obyaz_vyhodit_v', 96, TVyvoditj_v_datuList));
  Result := TVyvoditj_v_datuList(BoldMembers[96]);
end;

function TObjyavlenie._Getvyh_po_otdeljn_nomeram: TNomer_vyhodaList;
begin
  assert(ValidateMember('TObjyavlenie', 'vyh_po_otdeljn_nomeram', 97, TNomer_vyhodaList));
  Result := TNomer_vyhodaList(BoldMembers[97]);
end;

procedure TObjyavlenieList.Add(NewObject: TObjyavlenie);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TObjyavlenieList.IndexOf(anObject: TObjyavlenie): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TObjyavlenieList.Includes(anObject: TObjyavlenie) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TObjyavlenieList.AddNew: TObjyavlenie;
begin
  result := TObjyavlenie(InternalAddNew);
end;

procedure TObjyavlenieList.Insert(index: Integer; NewObject: TObjyavlenie);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TObjyavlenieList.GetBoldObject(index: Integer): TObjyavlenie;
begin
  result := TObjyavlenie(GetElement(index));
end;

procedure TObjyavlenieList.SetBoldObject(index: Integer; NewObject: TObjyavlenie);
begin;
  SetElement(index, NewObject);
end;

{ TRazdel }

function TRazdel._Get_M_Klyuch_naimenovanie: TBAString;
begin
  assert(ValidateMember('TRazdel', 'Klyuch_naimenovanie', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TRazdel._GetKlyuch_naimenovanie: String;
begin
  Result := M_Klyuch_naimenovanie.AsString;
end;

procedure TRazdel._SetKlyuch_naimenovanie(const NewValue: String);
begin
  M_Klyuch_naimenovanie.AsString := NewValue;
end;

function TRazdel._Get_M_Otkorretir: TBABoolean;
begin
  assert(ValidateMember('TRazdel', 'Otkorretir', 3, TBABoolean));
  Result := TBABoolean(BoldMembers[3]);
end;

function TRazdel._GetOtkorretir: Boolean;
begin
  Result := M_Otkorretir.AsBoolean;
end;

procedure TRazdel._SetOtkorretir(const NewValue: Boolean);
begin
  M_Otkorretir.AsBoolean := NewValue;
end;

function TRazdel._Get_M_GotNaVygr: TBABoolean;
begin
  assert(ValidateMember('TRazdel', 'GotNaVygr', 4, TBABoolean));
  Result := TBABoolean(BoldMembers[4]);
end;

function TRazdel._GetGotNaVygr: Boolean;
begin
  Result := M_GotNaVygr.AsBoolean;
end;

procedure TRazdel._SetGotNaVygr(const NewValue: Boolean);
begin
  M_GotNaVygr.AsBoolean := NewValue;
end;

function TRazdel._Get_M_SodergObjyavleniya: TBABoolean;
begin
  assert(ValidateMember('TRazdel', 'SodergObjyavleniya', 5, TBABoolean));
  Result := TBABoolean(BoldMembers[5]);
end;

function TRazdel._GetSodergObjyavleniya: Boolean;
begin
  Result := M_SodergObjyavleniya.AsBoolean;
end;

procedure TRazdel._SetSodergObjyavleniya(const NewValue: Boolean);
begin
  M_SodergObjyavleniya.AsBoolean := NewValue;
end;

function TRazdel._Get_M_CvetovoeOboznach: TBAString;
begin
  assert(ValidateMember('TRazdel', 'CvetovoeOboznach', 6, TBAString));
  Result := TBAString(BoldMembers[6]);
end;

function TRazdel._GetCvetovoeOboznach: String;
begin
  Result := M_CvetovoeOboznach.AsString;
end;

procedure TRazdel._SetCvetovoeOboznach(const NewValue: String);
begin
  M_CvetovoeOboznach.AsString := NewValue;
end;

function TRazdel._Get_M_WordBlob: TBATypedBlob;
begin
  assert(ValidateMember('TRazdel', 'WordBlob', 7, TBATypedBlob));
  Result := TBATypedBlob(BoldMembers[7]);
end;

function TRazdel._GetWordBlob: String;
begin
  Result := M_WordBlob.AsString;
end;

procedure TRazdel._SetWordBlob(const NewValue: String);
begin
  M_WordBlob.AsString := NewValue;
end;

function TRazdel._Get_M_TekstovZaglavie: TBAString;
begin
  assert(ValidateMember('TRazdel', 'TekstovZaglavie', 8, TBAString));
  Result := TBAString(BoldMembers[8]);
end;

function TRazdel._GetTekstovZaglavie: String;
begin
  Result := M_TekstovZaglavie.AsString;
end;

procedure TRazdel._SetTekstovZaglavie(const NewValue: String);
begin
  M_TekstovZaglavie.AsString := NewValue;
end;

function TRazdel._Get_M_Spisok_vklyuch_razdeloa: TBAString;
begin
  assert(ValidateMember('TRazdel', 'Spisok_vklyuch_razdeloa', 9, TBAString));
  Result := TBAString(BoldMembers[9]);
end;

function TRazdel._GetSpisok_vklyuch_razdeloa: String;
begin
  Result := M_Spisok_vklyuch_razdeloa.AsString;
end;

procedure TRazdel._SetSpisok_vklyuch_razdeloa(const NewValue: String);
begin
  M_Spisok_vklyuch_razdeloa.AsString := NewValue;
end;

function TRazdel._Get_M_Identifikator_razdela: TBAFloat;
begin
  assert(ValidateMember('TRazdel', 'Identifikator_razdela', 10, TBAFloat));
  Result := TBAFloat(BoldMembers[10]);
end;

function TRazdel._GetIdentifikator_razdela: double;
begin
  Result := M_Identifikator_razdela.AsFloat;
end;

procedure TRazdel._SetIdentifikator_razdela(const NewValue: double);
begin
  M_Identifikator_razdela.AsFloat := NewValue;
end;

function TRazdel._Get_M_Identifikator_vypuska: TBAFloat;
begin
  assert(ValidateMember('TRazdel', 'Identifikator_vypuska', 11, TBAFloat));
  Result := TBAFloat(BoldMembers[11]);
end;

function TRazdel._GetIdentifikator_vypuska: double;
begin
  Result := M_Identifikator_vypuska.AsFloat;
end;

function TRazdel._Get_M_Tek_vyp_identifikator: TBAFloat;
begin
  assert(ValidateMember('TRazdel', 'Tek_vyp_identifikator', 12, TBAFloat));
  Result := TBAFloat(BoldMembers[12]);
end;

function TRazdel._GetTek_vyp_identifikator: double;
begin
  Result := M_Tek_vyp_identifikator.AsFloat;
end;

function TRazdel._Get_M_Tek_vypusk_data: TBADate;
begin
  assert(ValidateMember('TRazdel', 'Tek_vypusk_data', 13, TBADate));
  Result := TBADate(BoldMembers[13]);
end;

function TRazdel._GetTek_vypusk_data: TDate;
begin
  Result := M_Tek_vypusk_data.AsDate;
end;

function TRazdel._Get_M_Posl_vyp_data: TBADate;
begin
  assert(ValidateMember('TRazdel', 'Posl_vyp_data', 14, TBADate));
  Result := TBADate(BoldMembers[14]);
end;

function TRazdel._GetPosl_vyp_data: TDate;
begin
  Result := M_Posl_vyp_data.AsDate;
end;

function TRazdel._Get_M_Posl_vyp_identifikator: TBAFloat;
begin
  assert(ValidateMember('TRazdel', 'Posl_vyp_identifikator', 15, TBAFloat));
  Result := TBAFloat(BoldMembers[15]);
end;

function TRazdel._GetPosl_vyp_identifikator: double;
begin
  Result := M_Posl_vyp_identifikator.AsFloat;
end;

function TRazdel._Get_M_Data_vypuska: TBADate;
begin
  assert(ValidateMember('TRazdel', 'Data_vypuska', 16, TBADate));
  Result := TBADate(BoldMembers[16]);
end;

function TRazdel._GetData_vypuska: TDate;
begin
  Result := M_Data_vypuska.AsDate;
end;

function TRazdel._Get_M_Identifikator_gaz: TBAInteger;
begin
  assert(ValidateMember('TRazdel', 'Identifikator_gaz', 17, TBAInteger));
  Result := TBAInteger(BoldMembers[17]);
end;

function TRazdel._GetIdentifikator_gaz: Integer;
begin
  Result := M_Identifikator_gaz.AsInteger;
end;

function TRazdel._Get_M_Yavl_kornevym: TBABoolean;
begin
  assert(ValidateMember('TRazdel', 'Yavl_kornevym', 18, TBABoolean));
  Result := TBABoolean(BoldMembers[18]);
end;

function TRazdel._GetYavl_kornevym: Boolean;
begin
  Result := M_Yavl_kornevym.AsBoolean;
end;

function TRazdel._Get_M_Chislo_sortirovki: TBAInteger;
begin
  assert(ValidateMember('TRazdel', 'Chislo_sortirovki', 19, TBAInteger));
  Result := TBAInteger(BoldMembers[19]);
end;

function TRazdel._GetChislo_sortirovki: Integer;
begin
  Result := M_Chislo_sortirovki.AsInteger;
end;

procedure TRazdel._SetChislo_sortirovki(const NewValue: Integer);
begin
  M_Chislo_sortirovki.AsInteger := NewValue;
end;

function TRazdel._Get_M_Tek_vypusk_nomer: TBAInteger;
begin
  assert(ValidateMember('TRazdel', 'Tek_vypusk_nomer', 20, TBAInteger));
  Result := TBAInteger(BoldMembers[20]);
end;

function TRazdel._GetTek_vypusk_nomer: Integer;
begin
  Result := M_Tek_vypusk_nomer.AsInteger;
end;

function TRazdel._Get_M_Tek_vypusk_god: TBAInteger;
begin
  assert(ValidateMember('TRazdel', 'Tek_vypusk_god', 21, TBAInteger));
  Result := TBAInteger(BoldMembers[21]);
end;

function TRazdel._GetTek_vypusk_god: Integer;
begin
  Result := M_Tek_vypusk_god.AsInteger;
end;

function TRazdel._Get_M_Posl_vypusk_nomer: TBAInteger;
begin
  assert(ValidateMember('TRazdel', 'Posl_vypusk_nomer', 22, TBAInteger));
  Result := TBAInteger(BoldMembers[22]);
end;

function TRazdel._GetPosl_vypusk_nomer: Integer;
begin
  Result := M_Posl_vypusk_nomer.AsInteger;
end;

function TRazdel._Get_M_Posl_vypusk_god: TBAInteger;
begin
  assert(ValidateMember('TRazdel', 'Posl_vypusk_god', 23, TBAInteger));
  Result := TBAInteger(BoldMembers[23]);
end;

function TRazdel._GetPosl_vypusk_god: Integer;
begin
  Result := M_Posl_vypusk_god.AsInteger;
end;

function TRazdel._Get_M_Yavl_srochnym: TBABoolean;
begin
  assert(ValidateMember('TRazdel', 'Yavl_srochnym', 24, TBABoolean));
  Result := TBABoolean(BoldMembers[24]);
end;

function TRazdel._GetYavl_srochnym: Boolean;
begin
  Result := M_Yavl_srochnym.AsBoolean;
end;

function TRazdel._Get_M_Kornevoi_srochnyi_razdel: TBABoolean;
begin
  assert(ValidateMember('TRazdel', 'Kornevoi_srochnyi_razdel', 25, TBABoolean));
  Result := TBABoolean(BoldMembers[25]);
end;

function TRazdel._GetKornevoi_srochnyi_razdel: Boolean;
begin
  Result := M_Kornevoi_srochnyi_razdel.AsBoolean;
end;

procedure TRazdel._SetKornevoi_srochnyi_razdel(const NewValue: Boolean);
begin
  M_Kornevoi_srochnyi_razdel.AsBoolean := NewValue;
end;

function TRazdel._Get_M_Ukazatj_marker: TBABoolean;
begin
  assert(ValidateMember('TRazdel', 'Ukazatj_marker', 26, TBABoolean));
  Result := TBABoolean(BoldMembers[26]);
end;

function TRazdel._GetUkazatj_marker: Boolean;
begin
  Result := M_Ukazatj_marker.AsBoolean;
end;

procedure TRazdel._SetUkazatj_marker(const NewValue: Boolean);
begin
  M_Ukazatj_marker.AsBoolean := NewValue;
end;

function TRazdel._Get_M_Marker: TBAString;
begin
  assert(ValidateMember('TRazdel', 'Marker', 27, TBAString));
  Result := TBAString(BoldMembers[27]);
end;

function TRazdel._GetMarker: String;
begin
  Result := M_Marker.AsString;
end;

procedure TRazdel._SetMarker(const NewValue: String);
begin
  M_Marker.AsString := NewValue;
end;

function TRazdel._Get_M_ProbelovDoMarkera: TBAInteger;
begin
  assert(ValidateMember('TRazdel', 'ProbelovDoMarkera', 28, TBAInteger));
  Result := TBAInteger(BoldMembers[28]);
end;

function TRazdel._GetProbelovDoMarkera: Integer;
begin
  Result := M_ProbelovDoMarkera.AsInteger;
end;

procedure TRazdel._SetProbelovDoMarkera(const NewValue: Integer);
begin
  M_ProbelovDoMarkera.AsInteger := NewValue;
end;

function TRazdel._Get_M_Probelov_PosleMarkera: TBAInteger;
begin
  assert(ValidateMember('TRazdel', 'Probelov_PosleMarkera', 29, TBAInteger));
  Result := TBAInteger(BoldMembers[29]);
end;

function TRazdel._GetProbelov_PosleMarkera: Integer;
begin
  Result := M_Probelov_PosleMarkera.AsInteger;
end;

procedure TRazdel._SetProbelov_PosleMarkera(const NewValue: Integer);
begin
  M_Probelov_PosleMarkera.AsInteger := NewValue;
end;

function TRazdel._Get_M_Imeet_opr_srochn: TBABoolean;
begin
  assert(ValidateMember('TRazdel', 'Imeet_opr_srochn', 30, TBABoolean));
  Result := TBABoolean(BoldMembers[30]);
end;

function TRazdel._GetImeet_opr_srochn: Boolean;
begin
  Result := M_Imeet_opr_srochn.AsBoolean;
end;

function TRazdel._Get_M_Putj_razdela: TBAString;
begin
  assert(ValidateMember('TRazdel', 'Putj_razdela', 31, TBAString));
  Result := TBAString(BoldMembers[31]);
end;

function TRazdel._GetPutj_razdela: String;
begin
  Result := M_Putj_razdela.AsString;
end;

function TRazdel._Get_M_Imeet_formu_kupona: TBABoolean;
begin
  assert(ValidateMember('TRazdel', 'Imeet_formu_kupona', 32, TBABoolean));
  Result := TBABoolean(BoldMembers[32]);
end;

function TRazdel._GetImeet_formu_kupona: Boolean;
begin
  Result := M_Imeet_formu_kupona.AsBoolean;
end;

function TRazdel._Get_M_Kod_formy_kupona: TBAString;
begin
  assert(ValidateMember('TRazdel', 'Kod_formy_kupona', 33, TBAString));
  Result := TBAString(BoldMembers[33]);
end;

function TRazdel._GetKod_formy_kupona: String;
begin
  Result := M_Kod_formy_kupona.AsString;
end;

function TRazdel._Get_M_Pokaz_objyavleniya: TBABoolean;
begin
  assert(ValidateMember('TRazdel', 'Pokaz_objyavleniya', 34, TBABoolean));
  Result := TBABoolean(BoldMembers[34]);
end;

function TRazdel._GetPokaz_objyavleniya: Boolean;
begin
  Result := M_Pokaz_objyavleniya.AsBoolean;
end;

function TRazdel._Get_M_PriznProdayu: TBABoolean;
begin
  assert(ValidateMember('TRazdel', 'PriznProdayu', 35, TBABoolean));
  Result := TBABoolean(BoldMembers[35]);
end;

function TRazdel._GetPriznProdayu: Boolean;
begin
  Result := M_PriznProdayu.AsBoolean;
end;

function TRazdel._Get_M_PrizeKuplyu: TBABoolean;
begin
  assert(ValidateMember('TRazdel', 'PrizeKuplyu', 36, TBABoolean));
  Result := TBABoolean(BoldMembers[36]);
end;

function TRazdel._GetPrizeKuplyu: Boolean;
begin
  Result := M_PrizeKuplyu.AsBoolean;
end;

function TRazdel._Get_M_PriznMenyayu: TBABoolean;
begin
  assert(ValidateMember('TRazdel', 'PriznMenyayu', 37, TBABoolean));
  Result := TBABoolean(BoldMembers[37]);
end;

function TRazdel._GetPriznMenyayu: Boolean;
begin
  Result := M_PriznMenyayu.AsBoolean;
end;

function TRazdel._Get_M_PriznSdayu: TBABoolean;
begin
  assert(ValidateMember('TRazdel', 'PriznSdayu', 38, TBABoolean));
  Result := TBABoolean(BoldMembers[38]);
end;

function TRazdel._GetPriznSdayu: Boolean;
begin
  Result := M_PriznSdayu.AsBoolean;
end;

function TRazdel._Get_M_PriznSnimu: TBABoolean;
begin
  assert(ValidateMember('TRazdel', 'PriznSnimu', 39, TBABoolean));
  Result := TBABoolean(BoldMembers[39]);
end;

function TRazdel._GetPriznSnimu: Boolean;
begin
  Result := M_PriznSnimu.AsBoolean;
end;

function TRazdel._Get_M_PriznVypolnyu: TBABoolean;
begin
  assert(ValidateMember('TRazdel', 'PriznVypolnyu', 40, TBABoolean));
  Result := TBABoolean(BoldMembers[40]);
end;

function TRazdel._GetPriznVypolnyu: Boolean;
begin
  Result := M_PriznVypolnyu.AsBoolean;
end;

function TRazdel._Get_M_PriznSoglasen: TBABoolean;
begin
  assert(ValidateMember('TRazdel', 'PriznSoglasen', 41, TBABoolean));
  Result := TBABoolean(BoldMembers[41]);
end;

function TRazdel._GetPriznSoglasen: Boolean;
begin
  Result := M_PriznSoglasen.AsBoolean;
end;

function TRazdel._Get_M_Kod_priznaka: TBAInteger;
begin
  assert(ValidateMember('TRazdel', 'Kod_priznaka', 42, TBAInteger));
  Result := TBAInteger(BoldMembers[42]);
end;

function TRazdel._GetKod_priznaka: Integer;
begin
  Result := M_Kod_priznaka.AsInteger;
end;

function TRazdel._Get_M_Shapka_srochnogo_razd: TBAString;
begin
  assert(ValidateMember('TRazdel', 'Shapka_srochnogo_razd', 43, TBAString));
  Result := TBAString(BoldMembers[43]);
end;

function TRazdel._GetShapka_srochnogo_razd: String;
begin
  Result := M_Shapka_srochnogo_razd.AsString;
end;

procedure TRazdel._SetShapka_srochnogo_razd(const NewValue: String);
begin
  M_Shapka_srochnogo_razd.AsString := NewValue;
end;

function TRazdel._Get_M_Sort_vklyuch_po_klyuch: TBABoolean;
begin
  assert(ValidateMember('TRazdel', 'Sort_vklyuch_po_klyuch', 44, TBABoolean));
  Result := TBABoolean(BoldMembers[44]);
end;

function TRazdel._GetSort_vklyuch_po_klyuch: Boolean;
begin
  Result := M_Sort_vklyuch_po_klyuch.AsBoolean;
end;

procedure TRazdel._SetSort_vklyuch_po_klyuch(const NewValue: Boolean);
begin
  M_Sort_vklyuch_po_klyuch.AsBoolean := NewValue;
end;

function TRazdel._Get_M_Steretj_perv_nesk_simv: TBABoolean;
begin
  assert(ValidateMember('TRazdel', 'Steretj_perv_nesk_simv', 45, TBABoolean));
  Result := TBABoolean(BoldMembers[45]);
end;

function TRazdel._GetSteretj_perv_nesk_simv: Boolean;
begin
  Result := M_Steretj_perv_nesk_simv.AsBoolean;
end;

procedure TRazdel._SetSteretj_perv_nesk_simv(const NewValue: Boolean);
begin
  M_Steretj_perv_nesk_simv.AsBoolean := NewValue;
end;

function TRazdel._Get_M_Kol_stir_simvolov: TBAInteger;
begin
  assert(ValidateMember('TRazdel', 'Kol_stir_simvolov', 46, TBAInteger));
  Result := TBAInteger(BoldMembers[46]);
end;

function TRazdel._GetKol_stir_simvolov: Integer;
begin
  Result := M_Kol_stir_simvolov.AsInteger;
end;

procedure TRazdel._SetKol_stir_simvolov(const NewValue: Integer);
begin
  M_Kol_stir_simvolov.AsInteger := NewValue;
end;

function TRazdel._Get_M_Vydel_perv_slovo_girnym: TBABoolean;
begin
  assert(ValidateMember('TRazdel', 'Vydel_perv_slovo_girnym', 47, TBABoolean));
  Result := TBABoolean(BoldMembers[47]);
end;

function TRazdel._GetVydel_perv_slovo_girnym: Boolean;
begin
  Result := M_Vydel_perv_slovo_girnym.AsBoolean;
end;

procedure TRazdel._SetVydel_perv_slovo_girnym(const NewValue: Boolean);
begin
  M_Vydel_perv_slovo_girnym.AsBoolean := NewValue;
end;

function TRazdel._Get_M_Kol_perv_slov: TBAInteger;
begin
  assert(ValidateMember('TRazdel', 'Kol_perv_slov', 48, TBAInteger));
  Result := TBAInteger(BoldMembers[48]);
end;

function TRazdel._GetKol_perv_slov: Integer;
begin
  Result := M_Kol_perv_slov.AsInteger;
end;

procedure TRazdel._SetKol_perv_slov(const NewValue: Integer);
begin
  M_Kol_perv_slov.AsInteger := NewValue;
end;

function TRazdel._Get_M_Chislo_objyavlenii: TBAInteger;
begin
  assert(ValidateMember('TRazdel', 'Chislo_objyavlenii', 49, TBAInteger));
  Result := TBAInteger(BoldMembers[49]);
end;

function TRazdel._GetChislo_objyavlenii: Integer;
begin
  Result := M_Chislo_objyavlenii.AsInteger;
end;

function TRazdel._Get_M_Chislo_nekorrektn: TBAInteger;
begin
  assert(ValidateMember('TRazdel', 'Chislo_nekorrektn', 50, TBAInteger));
  Result := TBAInteger(BoldMembers[50]);
end;

function TRazdel._GetChislo_nekorrektn: Integer;
begin
  Result := M_Chislo_nekorrektn.AsInteger;
end;

function TRazdel._Get_M_Ident_vyd_razd: TBAFloat;
begin
  assert(ValidateMember('TRazdel', 'Ident_vyd_razd', 51, TBAFloat));
  Result := TBAFloat(BoldMembers[51]);
end;

function TRazdel._GetIdent_vyd_razd: double;
begin
  Result := M_Ident_vyd_razd.AsFloat;
end;

function TRazdel._Get_M_Vhod_v_vydelennyi: TBABoolean;
begin
  assert(ValidateMember('TRazdel', 'Vhod_v_vydelennyi', 52, TBABoolean));
  Result := TBABoolean(BoldMembers[52]);
end;

function TRazdel._GetVhod_v_vydelennyi: Boolean;
begin
  Result := M_Vhod_v_vydelennyi.AsBoolean;
end;

function TRazdel._Get_M_Teg: TBAString;
begin
  assert(ValidateMember('TRazdel', 'Teg', 53, TBAString));
  Result := TBAString(BoldMembers[53]);
end;

function TRazdel._GetTeg: String;
begin
  Result := M_Teg.AsString;
end;

function TRazdel._Get_M_Teg_objyavl: TBAString;
begin
  assert(ValidateMember('TRazdel', 'Teg_objyavl', 54, TBAString));
  Result := TBAString(BoldMembers[54]);
end;

function TRazdel._GetTeg_objyavl: String;
begin
  Result := M_Teg_objyavl.AsString;
end;

procedure TRazdel._SetTeg_objyavl(const NewValue: String);
begin
  M_Teg_objyavl.AsString := NewValue;
end;

function TRazdel._Get_M_Ispoljz_teg_gl_razd: TBABoolean;
begin
  assert(ValidateMember('TRazdel', 'Ispoljz_teg_gl_razd', 55, TBABoolean));
  Result := TBABoolean(BoldMembers[55]);
end;

function TRazdel._GetIspoljz_teg_gl_razd: Boolean;
begin
  Result := M_Ispoljz_teg_gl_razd.AsBoolean;
end;

procedure TRazdel._SetIspoljz_teg_gl_razd(const NewValue: Boolean);
begin
  M_Ispoljz_teg_gl_razd.AsBoolean := NewValue;
end;

function TRazdel._Get_M_Sobstv_teg: TBAString;
begin
  assert(ValidateMember('TRazdel', 'Sobstv_teg', 56, TBAString));
  Result := TBAString(BoldMembers[56]);
end;

function TRazdel._GetSobstv_teg: String;
begin
  Result := M_Sobstv_teg.AsString;
end;

procedure TRazdel._SetSobstv_teg(const NewValue: String);
begin
  M_Sobstv_teg.AsString := NewValue;
end;

function TRazdel._Getvklyuchaet_objyavlenie: TObjyavlenieList;
begin
  assert(ValidateMember('TRazdel', 'vklyuchaet_objyavlenie', 57, TObjyavlenieList));
  Result := TObjyavlenieList(BoldMembers[57]);
end;

function TRazdel._Getvhodit_v_vypusk: TVypuskList;
begin
  assert(ValidateMember('TRazdel', 'vhodit_v_vypusk', 58, TVypuskList));
  Result := TVypuskList(BoldMembers[58]);
end;

function TRazdel._GetLinkvhodit_v_vypuskvklyuchaet_razdel: TLinkvhodit_v_vypuskvklyuchaet_razdelList;
begin
  assert(ValidateMember('TRazdel', 'Linkvhodit_v_vypuskvklyuchaet_razdel', 59, TLinkvhodit_v_vypuskvklyuchaet_razdelList));
  Result := TLinkvhodit_v_vypuskvklyuchaet_razdelList(BoldMembers[59]);
end;

function TRazdel._Get_M_vhodit_v_glavn_razdel: TBoldObjectReference;
begin
  assert(ValidateMember('TRazdel', 'vhodit_v_glavn_razdel', 60, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[60]);
end;

function TRazdel._Getvhodit_v_glavn_razdel: TRazdel;
begin
  assert(not assigned(M_vhodit_v_glavn_razdel.BoldObject) or (M_vhodit_v_glavn_razdel.BoldObject is TRazdel), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'vhodit_v_glavn_razdel', M_vhodit_v_glavn_razdel.BoldObject.ClassName, 'TRazdel']));
  Result := TRazdel(M_vhodit_v_glavn_razdel.BoldObject);
end;

procedure TRazdel._Setvhodit_v_glavn_razdel(const value: TRazdel);
begin
  M_vhodit_v_glavn_razdel.BoldObject := value;
end;

function TRazdel._Getsoderg_mladsh_razdel: TRazdelList;
begin
  assert(ValidateMember('TRazdel', 'soderg_mladsh_razdel', 61, TRazdelList));
  Result := TRazdelList(BoldMembers[61]);
end;

function TRazdel._Get_M_razdel_zapolnyaetsya: TBoldObjectReference;
begin
  assert(ValidateMember('TRazdel', 'razdel_zapolnyaetsya', 62, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[62]);
end;

function TRazdel._Getrazdel_zapolnyaetsya: TPersonal;
begin
  assert(not assigned(M_razdel_zapolnyaetsya.BoldObject) or (M_razdel_zapolnyaetsya.BoldObject is TPersonal), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'razdel_zapolnyaetsya', M_razdel_zapolnyaetsya.BoldObject.ClassName, 'TPersonal']));
  Result := TPersonal(M_razdel_zapolnyaetsya.BoldObject);
end;

procedure TRazdel._Setrazdel_zapolnyaetsya(const value: TPersonal);
begin
  M_razdel_zapolnyaetsya.BoldObject := value;
end;

function TRazdel._GetSoderg_nabor_objvl_s_klyuch: TKlyuchi_vklyuch__objyavleniiList;
begin
  assert(ValidateMember('TRazdel', 'Soderg_nabor_objvl_s_klyuch', 63, TKlyuchi_vklyuch__objyavleniiList));
  Result := TKlyuchi_vklyuch__objyavleniiList(BoldMembers[63]);
end;

function TRazdel._Get_M_imet_srochn_razdel: TBoldObjectReference;
begin
  assert(ValidateMember('TRazdel', 'imet_srochn_razdel', 64, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[64]);
end;

function TRazdel._Getimet_srochn_razdel: TRazdel;
begin
  assert(not assigned(M_imet_srochn_razdel.BoldObject) or (M_imet_srochn_razdel.BoldObject is TRazdel), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'imet_srochn_razdel', M_imet_srochn_razdel.BoldObject.ClassName, 'TRazdel']));
  Result := TRazdel(M_imet_srochn_razdel.BoldObject);
end;

procedure TRazdel._Setimet_srochn_razdel(const value: TRazdel);
begin
  M_imet_srochn_razdel.BoldObject := value;
end;

function TRazdel._Getyavl_srochn_dlya: TRazdelList;
begin
  assert(ValidateMember('TRazdel', 'yavl_srochn_dlya', 65, TRazdelList));
  Result := TRazdelList(BoldMembers[65]);
end;

function TRazdel._Get_M_imeet_priznak: TBoldObjectReference;
begin
  assert(ValidateMember('TRazdel', 'imeet_priznak', 66, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[66]);
end;

function TRazdel._Getimeet_priznak: TPriznak_razdela;
begin
  assert(not assigned(M_imeet_priznak.BoldObject) or (M_imeet_priznak.BoldObject is TPriznak_razdela), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'imeet_priznak', M_imeet_priznak.BoldObject.ClassName, 'TPriznak_razdela']));
  Result := TPriznak_razdela(M_imeet_priznak.BoldObject);
end;

procedure TRazdel._Setimeet_priznak(const value: TPriznak_razdela);
begin
  M_imeet_priznak.BoldObject := value;
end;

function TRazdel._Get_M_ispoljz_dlya_dobavleniya: TBoldObjectReference;
begin
  assert(ValidateMember('TRazdel', 'ispoljz_dlya_dobavleniya', 67, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[67]);
end;

function TRazdel._Getispoljz_dlya_dobavleniya: TKupon;
begin
  assert(not assigned(M_ispoljz_dlya_dobavleniya.BoldObject) or (M_ispoljz_dlya_dobavleniya.BoldObject is TKupon), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'ispoljz_dlya_dobavleniya', M_ispoljz_dlya_dobavleniya.BoldObject.ClassName, 'TKupon']));
  Result := TKupon(M_ispoljz_dlya_dobavleniya.BoldObject);
end;

procedure TRazdel._Setispoljz_dlya_dobavleniya(const value: TKupon);
begin
  M_ispoljz_dlya_dobavleniya.BoldObject := value;
end;

procedure TRazdelList.Add(NewObject: TRazdel);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TRazdelList.IndexOf(anObject: TRazdel): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TRazdelList.Includes(anObject: TRazdel) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TRazdelList.AddNew: TRazdel;
begin
  result := TRazdel(InternalAddNew);
end;

procedure TRazdelList.Insert(index: Integer; NewObject: TRazdel);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TRazdelList.GetBoldObject(index: Integer): TRazdel;
begin
  result := TRazdel(GetElement(index));
end;

procedure TRazdelList.SetBoldObject(index: Integer; NewObject: TRazdel);
begin;
  SetElement(index, NewObject);
end;

{ TKlient }

function TKlient._Get_M_Yavl_yur_licom: TBABoolean;
begin
  assert(ValidateMember('TKlient', 'Yavl_yur_licom', 26, TBABoolean));
  Result := TBABoolean(BoldMembers[26]);
end;

function TKlient._GetYavl_yur_licom: Boolean;
begin
  Result := M_Yavl_yur_licom.AsBoolean;
end;

procedure TKlient._SetYavl_yur_licom(const NewValue: Boolean);
begin
  M_Yavl_yur_licom.AsBoolean := NewValue;
end;

function TKlient._Get_M_Imenovanie: TBAString;
begin
  assert(ValidateMember('TKlient', 'Imenovanie', 27, TBAString));
  Result := TBAString(BoldMembers[27]);
end;

function TKlient._GetImenovanie: String;
begin
  Result := M_Imenovanie.AsString;
end;

function TKlient._Get_M_Adres: TBAString;
begin
  assert(ValidateMember('TKlient', 'Adres', 28, TBAString));
  Result := TBAString(BoldMembers[28]);
end;

function TKlient._GetAdres: String;
begin
  Result := M_Adres.AsString;
end;

function TKlient._Get_M_Telefony: TBAString;
begin
  assert(ValidateMember('TKlient', 'Telefony', 29, TBAString));
  Result := TBAString(BoldMembers[29]);
end;

function TKlient._GetTelefony: String;
begin
  Result := M_Telefony.AsString;
end;

function TKlient._Get_M_Cvetovoe_oboznachenie: TBAString;
begin
  assert(ValidateMember('TKlient', 'Cvetovoe_oboznachenie', 30, TBAString));
  Result := TBAString(BoldMembers[30]);
end;

function TKlient._GetCvetovoe_oboznachenie: String;
begin
  Result := M_Cvetovoe_oboznachenie.AsString;
end;

procedure TKlient._SetCvetovoe_oboznachenie(const NewValue: String);
begin
  M_Cvetovoe_oboznachenie.AsString := NewValue;
end;

function TKlient._Getdayot_v_vypusk: TObjyavlenieList;
begin
  assert(ValidateMember('TKlient', 'dayot_v_vypusk', 31, TObjyavlenieList));
  Result := TObjyavlenieList(BoldMembers[31]);
end;

procedure TKlientList.Add(NewObject: TKlient);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TKlientList.IndexOf(anObject: TKlient): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TKlientList.Includes(anObject: TKlient) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TKlientList.AddNew: TKlient;
begin
  result := TKlient(InternalAddNew);
end;

procedure TKlientList.Insert(index: Integer; NewObject: TKlient);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TKlientList.GetBoldObject(index: Integer): TKlient;
begin
  result := TKlient(GetElement(index));
end;

procedure TKlientList.SetBoldObject(index: Integer; NewObject: TKlient);
begin;
  SetElement(index, NewObject);
end;

{ TPersonal }

function TPersonal._Get_M_Login: TBAString;
begin
  assert(ValidateMember('TPersonal', 'Login', 26, TBAString));
  Result := TBAString(BoldMembers[26]);
end;

function TPersonal._GetLogin: String;
begin
  Result := M_Login.AsString;
end;

procedure TPersonal._SetLogin(const NewValue: String);
begin
  M_Login.AsString := NewValue;
end;

function TPersonal._Get_M_Parolj: TBAString;
begin
  assert(ValidateMember('TPersonal', 'Parolj', 27, TBAString));
  Result := TBAString(BoldMembers[27]);
end;

function TPersonal._GetParolj: String;
begin
  Result := M_Parolj.AsString;
end;

procedure TPersonal._SetParolj(const NewValue: String);
begin
  M_Parolj.AsString := NewValue;
end;

function TPersonal._Get_M_Prava: TBAInteger;
begin
  assert(ValidateMember('TPersonal', 'Prava', 28, TBAInteger));
  Result := TBAInteger(BoldMembers[28]);
end;

function TPersonal._GetPrava: Integer;
begin
  Result := M_Prava.AsInteger;
end;

procedure TPersonal._SetPrava(const NewValue: Integer);
begin
  M_Prava.AsInteger := NewValue;
end;

function TPersonal._Get_M_Kommentarii: TBAString;
begin
  assert(ValidateMember('TPersonal', 'Kommentarii', 29, TBAString));
  Result := TBAString(BoldMembers[29]);
end;

function TPersonal._GetKommentarii: String;
begin
  Result := M_Kommentarii.AsString;
end;

procedure TPersonal._SetKommentarii(const NewValue: String);
begin
  M_Kommentarii.AsString := NewValue;
end;

function TPersonal._Get_M_Razreshitj_vsyo: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razreshitj_vsyo', 30, TBABoolean));
  Result := TBABoolean(BoldMembers[30]);
end;

function TPersonal._GetRazreshitj_vsyo: Boolean;
begin
  Result := M_Razreshitj_vsyo.AsBoolean;
end;

procedure TPersonal._SetRazreshitj_vsyo(const NewValue: Boolean);
begin
  M_Razreshitj_vsyo.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razresh_administr: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razresh_administr', 31, TBABoolean));
  Result := TBABoolean(BoldMembers[31]);
end;

function TPersonal._GetRazresh_administr: Boolean;
begin
  Result := M_Razresh_administr.AsBoolean;
end;

procedure TPersonal._SetRazresh_administr(const NewValue: Boolean);
begin
  M_Razresh_administr.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razresh_nastroiku_raboty: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razresh_nastroiku_raboty', 32, TBABoolean));
  Result := TBABoolean(BoldMembers[32]);
end;

function TPersonal._GetRazresh_nastroiku_raboty: Boolean;
begin
  Result := M_Razresh_nastroiku_raboty.AsBoolean;
end;

procedure TPersonal._SetRazresh_nastroiku_raboty(const NewValue: Boolean);
begin
  M_Razresh_nastroiku_raboty.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razreshitj_prosmotr_logov: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razreshitj_prosmotr_logov', 33, TBABoolean));
  Result := TBABoolean(BoldMembers[33]);
end;

function TPersonal._GetRazreshitj_prosmotr_logov: Boolean;
begin
  Result := M_Razreshitj_prosmotr_logov.AsBoolean;
end;

procedure TPersonal._SetRazreshitj_prosmotr_logov(const NewValue: Boolean);
begin
  M_Razreshitj_prosmotr_logov.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razr_udalenie_izdanii: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razr_udalenie_izdanii', 34, TBABoolean));
  Result := TBABoolean(BoldMembers[34]);
end;

function TPersonal._GetRazr_udalenie_izdanii: Boolean;
begin
  Result := M_Razr_udalenie_izdanii.AsBoolean;
end;

procedure TPersonal._SetRazr_udalenie_izdanii(const NewValue: Boolean);
begin
  M_Razr_udalenie_izdanii.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razreshitj_udalenie_vypuskov: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razreshitj_udalenie_vypuskov', 35, TBABoolean));
  Result := TBABoolean(BoldMembers[35]);
end;

function TPersonal._GetRazreshitj_udalenie_vypuskov: Boolean;
begin
  Result := M_Razreshitj_udalenie_vypuskov.AsBoolean;
end;

procedure TPersonal._SetRazreshitj_udalenie_vypuskov(const NewValue: Boolean);
begin
  M_Razreshitj_udalenie_vypuskov.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razr_udalenie_razdelov: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razr_udalenie_razdelov', 36, TBABoolean));
  Result := TBABoolean(BoldMembers[36]);
end;

function TPersonal._GetRazr_udalenie_razdelov: Boolean;
begin
  Result := M_Razr_udalenie_razdelov.AsBoolean;
end;

procedure TPersonal._SetRazr_udalenie_razdelov(const NewValue: Boolean);
begin
  M_Razr_udalenie_razdelov.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razreshitj_udalenie_objyavlenii: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razreshitj_udalenie_objyavlenii', 37, TBABoolean));
  Result := TBABoolean(BoldMembers[37]);
end;

function TPersonal._GetRazreshitj_udalenie_objyavlenii: Boolean;
begin
  Result := M_Razreshitj_udalenie_objyavlenii.AsBoolean;
end;

procedure TPersonal._SetRazreshitj_udalenie_objyavlenii(const NewValue: Boolean);
begin
  M_Razreshitj_udalenie_objyavlenii.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razreshitj_udalenie_ostaljnogo: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razreshitj_udalenie_ostaljnogo', 38, TBABoolean));
  Result := TBABoolean(BoldMembers[38]);
end;

function TPersonal._GetRazreshitj_udalenie_ostaljnogo: Boolean;
begin
  Result := M_Razreshitj_udalenie_ostaljnogo.AsBoolean;
end;

procedure TPersonal._SetRazreshitj_udalenie_ostaljnogo(const NewValue: Boolean);
begin
  M_Razreshitj_udalenie_ostaljnogo.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razr_prav_redkomen_sprav: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razr_prav_redkomen_sprav', 39, TBABoolean));
  Result := TBABoolean(BoldMembers[39]);
end;

function TPersonal._GetRazr_prav_redkomen_sprav: Boolean;
begin
  Result := M_Razr_prav_redkomen_sprav.AsBoolean;
end;

procedure TPersonal._SetRazr_prav_redkomen_sprav(const NewValue: Boolean);
begin
  M_Razr_prav_redkomen_sprav.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razr_prav_oper_razdelov: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razr_prav_oper_razdelov', 40, TBABoolean));
  Result := TBABoolean(BoldMembers[40]);
end;

function TPersonal._GetRazr_prav_oper_razdelov: Boolean;
begin
  Result := M_Razr_prav_oper_razdelov.AsBoolean;
end;

procedure TPersonal._SetRazr_prav_oper_razdelov(const NewValue: Boolean);
begin
  M_Razr_prav_oper_razdelov.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Pokaz_cveta_klientov: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Pokaz_cveta_klientov', 41, TBABoolean));
  Result := TBABoolean(BoldMembers[41]);
end;

function TPersonal._GetPokaz_cveta_klientov: Boolean;
begin
  Result := M_Pokaz_cveta_klientov.AsBoolean;
end;

procedure TPersonal._SetPokaz_cveta_klientov(const NewValue: Boolean);
begin
  M_Pokaz_cveta_klientov.AsBoolean := NewValue;
end;

function TPersonal._Getrabotaet_s: TObjyavlenieList;
begin
  assert(ValidateMember('TPersonal', 'rabotaet_s', 42, TObjyavlenieList));
  Result := TObjyavlenieList(BoldMembers[42]);
end;

function TPersonal._Getdeistviya_fiksiruyutsya_v: TLog_operaciiList;
begin
  assert(ValidateMember('TPersonal', 'deistviya_fiksiruyutsya_v', 43, TLog_operaciiList));
  Result := TLog_operaciiList(BoldMembers[43]);
end;

function TPersonal._Getsotrudnik_rabotaet_s: TRazdelList;
begin
  assert(ValidateMember('TPersonal', 'sotrudnik_rabotaet_s', 44, TRazdelList));
  Result := TRazdelList(BoldMembers[44]);
end;

procedure TPersonalList.Add(NewObject: TPersonal);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TPersonalList.IndexOf(anObject: TPersonal): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TPersonalList.Includes(anObject: TPersonal) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TPersonalList.AddNew: TPersonal;
begin
  result := TPersonal(InternalAddNew);
end;

procedure TPersonalList.Insert(index: Integer; NewObject: TPersonal);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TPersonalList.GetBoldObject(index: Integer): TPersonal;
begin
  result := TPersonal(GetElement(index));
end;

procedure TPersonalList.SetBoldObject(index: Integer; NewObject: TPersonal);
begin;
  SetElement(index, NewObject);
end;

function GeneratedCodeCRC: String;
begin
  result := '5785039';
end;

procedure InstallObjectListClasses(BoldObjectListClasses: TBoldGeneratedClassList);
begin
  BoldObjectListClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRootList);
  BoldObjectListClasses.AddObjectEntry('Linksostavlyaet_harakterispoljz_prizn_dobavleniya', TLinksostavlyaet_harakterispoljz_prizn_dobavleniyaList);
  BoldObjectListClasses.AddObjectEntry('Linkvhodit_v_vypuskvklyuchaet_razdel', TLinkvhodit_v_vypuskvklyuchaet_razdelList);
  BoldObjectListClasses.AddObjectEntry('Vyvoditj_v_datu', TVyvoditj_v_datuList);
  BoldObjectListClasses.AddObjectEntry('Vypusk', TVypuskList);
  BoldObjectListClasses.AddObjectEntry('God_vyhoda', TGod_vyhodaList);
  BoldObjectListClasses.AddObjectEntry('Klass_poiska', TKlass_poiskaList);
  BoldObjectListClasses.AddObjectEntry('Log_operacii', TLog_operaciiList);
  BoldObjectListClasses.AddObjectEntry('Nomer_vyhoda', TNomer_vyhodaList);
  BoldObjectListClasses.AddObjectEntry('Persona', TPersonaList);
  BoldObjectListClasses.AddObjectEntry('Spravochnik', TSpravochnikList);
  BoldObjectListClasses.AddObjectEntry('Spravochnik_grupp_vypuskov', TSpravochnik_grupp_vypuskovList);
  BoldObjectListClasses.AddObjectEntry('Shablon_objyavleniya', TShablon_objyavleniyaList);
  BoldObjectListClasses.AddObjectEntry('Shablon_razdela', TShablon_razdelaList);
  BoldObjectListClasses.AddObjectEntry('Organizaciya', TOrganizaciyaList);
  BoldObjectListClasses.AddObjectEntry('Gazeta', TGazetaList);
  BoldObjectListClasses.AddObjectEntry('Gruppa_vypuskov', TGruppa_vypuskovList);
  BoldObjectListClasses.AddObjectEntry('Klyuchi_vklyuch__objyavlenii', TKlyuchi_vklyuch__objyavleniiList);
  BoldObjectListClasses.AddObjectEntry('Kupon', TKuponList);
  BoldObjectListClasses.AddObjectEntry('Priznak_razdela', TPriznak_razdelaList);
  BoldObjectListClasses.AddObjectEntry('Razdel_spravochnika', TRazdel_spravochnikaList);
  BoldObjectListClasses.AddObjectEntry('Tip_vypuska', TTip_vypuskaList);
  BoldObjectListClasses.AddObjectEntry('Tip_razdelitelya', TTip_razdelitelyaList);
  BoldObjectListClasses.AddObjectEntry('Tip_ramki', TTip_ramkiList);
  BoldObjectListClasses.AddObjectEntry('Tip_fona', TTip_fonaList);
  BoldObjectListClasses.AddObjectEntry('Tolshina_linii', TTolshina_liniiList);
  BoldObjectListClasses.AddObjectEntry('Objyavlenie', TObjyavlenieList);
  BoldObjectListClasses.AddObjectEntry('Razdel', TRazdelList);
  BoldObjectListClasses.AddObjectEntry('Klient', TKlientList);
  BoldObjectListClasses.AddObjectEntry('Personal', TPersonalList);
end;

procedure InstallBusinessClasses(BoldObjectClasses: TBoldGeneratedClassList);
begin
  BoldObjectClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRoot);
  BoldObjectClasses.AddObjectEntry('Linksostavlyaet_harakterispoljz_prizn_dobavleniya', TLinksostavlyaet_harakterispoljz_prizn_dobavleniya);
  BoldObjectClasses.AddObjectEntry('Linkvhodit_v_vypuskvklyuchaet_razdel', TLinkvhodit_v_vypuskvklyuchaet_razdel);
  BoldObjectClasses.AddObjectEntry('Vyvoditj_v_datu', TVyvoditj_v_datu);
  BoldObjectClasses.AddObjectEntry('Vypusk', TVypusk);
  BoldObjectClasses.AddObjectEntry('God_vyhoda', TGod_vyhoda);
  BoldObjectClasses.AddObjectEntry('Klass_poiska', TKlass_poiska);
  BoldObjectClasses.AddObjectEntry('Log_operacii', TLog_operacii);
  BoldObjectClasses.AddObjectEntry('Nomer_vyhoda', TNomer_vyhoda);
  BoldObjectClasses.AddObjectEntry('Persona', TPersona);
  BoldObjectClasses.AddObjectEntry('Spravochnik', TSpravochnik);
  BoldObjectClasses.AddObjectEntry('Spravochnik_grupp_vypuskov', TSpravochnik_grupp_vypuskov);
  BoldObjectClasses.AddObjectEntry('Shablon_objyavleniya', TShablon_objyavleniya);
  BoldObjectClasses.AddObjectEntry('Shablon_razdela', TShablon_razdela);
  BoldObjectClasses.AddObjectEntry('Organizaciya', TOrganizaciya);
  BoldObjectClasses.AddObjectEntry('Gazeta', TGazeta);
  BoldObjectClasses.AddObjectEntry('Gruppa_vypuskov', TGruppa_vypuskov);
  BoldObjectClasses.AddObjectEntry('Klyuchi_vklyuch__objyavlenii', TKlyuchi_vklyuch__objyavlenii);
  BoldObjectClasses.AddObjectEntry('Kupon', TKupon);
  BoldObjectClasses.AddObjectEntry('Priznak_razdela', TPriznak_razdela);
  BoldObjectClasses.AddObjectEntry('Razdel_spravochnika', TRazdel_spravochnika);
  BoldObjectClasses.AddObjectEntry('Tip_vypuska', TTip_vypuska);
  BoldObjectClasses.AddObjectEntry('Tip_razdelitelya', TTip_razdelitelya);
  BoldObjectClasses.AddObjectEntry('Tip_ramki', TTip_ramki);
  BoldObjectClasses.AddObjectEntry('Tip_fona', TTip_fona);
  BoldObjectClasses.AddObjectEntry('Tolshina_linii', TTolshina_linii);
  BoldObjectClasses.AddObjectEntry('Objyavlenie', TObjyavlenie);
  BoldObjectClasses.AddObjectEntry('Razdel', TRazdel);
  BoldObjectClasses.AddObjectEntry('Klient', TKlient);
  BoldObjectClasses.AddObjectEntry('Personal', TPersonal);
end;

var
  CodeDescriptor: TBoldGeneratedCodeDescriptor;

initialization
  CodeDescriptor := GeneratedCodes.AddGeneratedCodeDescriptorWithFunc('BusinessClasses', InstallBusinessClasses, InstallObjectListClasses, GeneratedCodeCRC);
finalization
  GeneratedCodes.Remove(CodeDescriptor);
end.

